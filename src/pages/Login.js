import React, { useState, useContext, useEffect, useRef } from 'react';
import { useHistory } from "react-router-dom";
import Axios from 'axios';
import "./Login.css"
import ob_tag from './../images/ob_icon.png';
import manila from '../assets/icons/manila.png';
import LoginAuthPop from './../components/Dialog/LoginAuthPop';
import { Link } from 'react-router-dom';
import Helm from '../components/Helmet/Helmet';
import { FaUserAlt, FaLock } from 'react-icons/fa';
import { AuthContext } from './../helpers/AuthContext'
import PopUp from '../components/Dialog/PopUp';
import SuccessDialog from '../components/Dialog/SuccessDialog';
import loading from './../assets/icons/loading.png'
function useKey(key, cb) { const callbackRef = useRef(cb); useEffect(() => { callbackRef.current = cb }); useEffect(() => { function handle(event) { if (event.code === key) { callbackRef.current(event) } } document.addEventListener("keypress", handle); return () => document.removeEventListener("keypress", handle) }, [key]) }
function Login() {
    Axios.defaults.withCredentials = true;
    const { setAuthState } = useContext(AuthContext), guest = () => { history.push("/home") }, refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1 }); window.location.reload() }, history = useHistory(), [username, setUsername] = useState(""), [password, setPassword] = useState(""), [role, setRole] = useState(""), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [openPopup, setOpenPopup] = useState(!1), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [brgyinfo, setBrgyInfo] = useState([]), [code, setCode] = useState(""), [isLoading, setIsLoading] = useState(!1);
    useEffect(() => { const ac = new AbortController(); setIsLoading(!0); Promise.all([Axios.get("http://localhost:3001/login").then((response) => { if (response.data.loggedIn === !0) { setRole(response.data.user[0].role) } }), Axios.get("http://localhost:3001/GetBarangayInformation").then((response) => { setBrgyInfo(response.data); setIsLoading(!1) }),]).then(() => setIsLoading(!1)).catch(ex => console.error(ex)); return () => ac.abort() }, [])
    const login = () => { if (!username || !password) { setErrorDialog({ isOpen: true, title: "Login Failed", subtitle: "Username and Password are required.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (window.innerWidth <= 600) { Axios.post("http://localhost:3001/loginMobile", { loginMobile_user: username, loginMobile_password: password }).then((response) => { if (!response.data.verification && response.data.message === "Not Verified") { setOpenPopup(true) } else if (response.data.message2) { setErrorDialog({ isOpen: true, title: "Login Failed", subtitle: response.data.message2, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.message3) { setErrorDialog({ isOpen: true, title: "Login Failed", subtitle: response.data.message3, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.checkMessage) { setErrorDialog({ isOpen: true, title: "Login Failed", subtitle: response.data.checkMessage, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { localStorage.setItem("token", response.data.token); setAuthState({ username: response.data.username, id: response.data.resident_id, status: true }); window.location.reload() } }) } else { Axios.post("http://localhost:3001/login", { login_username: username, login_password: password }).then((response) => { if (!response.data.verification && response.data.message === "Not Verified") { setOpenPopup(true) } else if (response.data.message2) { setErrorDialog({ isOpen: true, title: "Login Failed", subtitle: response.data.message2, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.message3) { setErrorDialog({ isOpen: true, title: "Login Failed", subtitle: response.data.message3, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.checkMessage) { setErrorDialog({ isOpen: true, title: "Login Failed", subtitle: response.data.checkMessage, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { localStorage.setItem("token", response.data.token); setAuthState({ username: response.data.username, id: response.data.resident_id, status: true }); window.location.reload() } }) } }
    useKey("Enter", login)
    const verify_user = () => { if (!code) { setErrorDialog({ isOpen: true, title: "Input Error", subtitle: "Please enter code.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { Axios.post("http://localhost:3001/VerifyAccount", { verify_code: code, verify_user: username, verify_password: password, }).then((response) => { if (!response.data.success) { setErrorDialog({ isOpen: true, title: "Verification Failed.", subtitle: "Incorrect Verification Code.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setSuccessDialog({ isOpen: true, title: "Account Verified.", subtitle: "Please log in again and complete your information in your Profile so the barangay can verify your details to gain full access to our features.", noButton: <button onClick={() => refresh()} className="alert_noBtn">Back</button>, }) } }) } }
    return (
        <div className="login_body">
            <Helm title={`Login | One Barangay`} />
            <PopUp title="User Verification" openPopup={openPopup} setOpenPopup={setOpenPopup} maxWidth="lg"> <div className="wrapper" id="login_body_wrapper"> <div className="verify_title">You are not verified yet. Check your e-mail for verification code.</div><br /> <div className="forms"> <div className="input_fields"> <label>Enter Code:</label> <input type="text" className="inputs" autoComplete="off" onChange={(e) => setCode(e.target.value)} /> </div><div className="input_fields"> <input type="submit" value="Submit" className="btn" onClick={verify_user} /> </div></div></div></PopUp>
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <body> <div className="bg"> <div className="loading_container">{isLoading && <img src={loading} alt={loading} className="loading_icon" />}</div><div className="login_pad">{brgyinfo.map((row, index) => (<><div className="login_icons"><img key={index[0]} id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(row.brgy_image)}`} draggable={!1} alt="uploaded-img" /><img src={ob_tag} alt={ob_tag} /><img src={manila} alt={manila} /></div><div className="login_titles"><p>Republic of the Philippines</p><p key={index[1]}>{row.brgy_barangay + " " + row.brgy_zone + " " + row.brgy_district}</p><p key={index[2]}>{row.brgy_cityDistrict + ", " + row.brgy_city}</p></div></>))}<div className="login_container"> <div className="login_wrapper"> <div className="login_title"><span>LOG IN</span></div><div className="login_form"> <div className="login_row"> <i><FaUserAlt /></i> <input type="text" placeholder="Username" onChange={(e) => setUsername(e.target.value)} /> </div><div className="login_row"> <i><FaLock /></i> <input type="password" placeholder="Password" onChange={(e) => setPassword(e.target.value)} /> </div><div className="login_pass"><Link to="/forgot-account">Forgot Account?</Link></div><div className="login_row button"> <input type="submit" value="Login" onClick={login} /> </div>{window.innerWidth < 600 ? "" : <> <div className="login_row button"> <p className="continue_as_guest_separator"> OR </p><input type="submit" value="Guest" onClick={guest} /> </div></>}<div className="login_signup-link">Not a member? <Link to="/register"> Register Here </Link></div></div></div></div></div>{localStorage.getItem("token") && role === "User" ? history.push("/home") : ""}{localStorage.getItem("token") && role === "Admin" ? history.push("/AdminHome") : ""}{localStorage.getItem("token") && role === "TechAdmin" ? history.push("/technical-admin") : ""}</div></body>
        </div>
    )
}
export default Login