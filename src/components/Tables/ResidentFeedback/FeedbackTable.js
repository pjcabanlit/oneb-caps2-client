import React, { useState } from 'react'
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Grid, Typography, TablePagination, TableFooter } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import ViewEditDialog from './../../Dialog/ViewEditDialog';
import Axios from 'axios'
import ConfirmDialog from './../../Dialog/ConfirmDialog';
import SuccessDialog from './../../Dialog/SuccessDialog';
import Notification from './../../Dialog/Notification';
import LoginAuthPop from './../../Dialog/LoginAuthPop';
import PopUp from './../../Dialog/PopUp';
import { FaEdit } from 'react-icons/fa';
import Moment from 'react-moment';
const useStyles = makeStyles((theme) => ({ table: { minWidth: 200, }, tableContainer: { maxWidth: 1175, borderRadius: 0, }, tableHeaderCell: { fontWeight: 'bold', backgroundColor: '#0061a8', color: theme.palette.getContrastText(theme.palette.primary.dark), fontFamily: "Montserrat, sans-serif", cursor: "pointer", lineHeight: "1.43", paddingTop: "15px", paddingBottom: "15px" }, tableCell: { fontFamily: "Montserrat, sans-serif", cursor: "pointer", }, avatar: { backgroundColor: theme.palette.primary.light, color: theme.palette.getContrastText(theme.palette.primary.light) }, name: { cursor: "pointer", fontWeight: 'bold', color: "#2e4a56", fontFamily: "Montserrat, sans-serif" }, residentIdTitle: { fontSize: "15px" }, status: { fontWeight: 'bold', fontSize: '0.75rem', color: 'white', backgroundColor: 'grey', borderRadius: 5, padding: '3px 10px', display: 'inline-block', fontFamily: "Montserrat, sans-serif", } }))
export default function FeedbackTable({ data }) {
    Axios.defaults.withCredentials = true;
    const classes = useStyles(), [page, setPage] = useState(0), [rowsPerPage, setRowsPerPage] = useState(5), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [first_name, setFirstName] = useState(""), [middle_name, setMiddleName] = useState(""), [last_name, setLastName] = useState(""), [suffix, setSuffix] = useState(""), [feedback, setFeedback] = useState(""), [date_submitted, setDateSubmitted] = useState(""), [feedback_id, setFeedBackId] = useState(""), [resident_id, setResidentId] = useState(""), handleChangePage = (e, t) => { setPage(t) }, handleChangeRowsPerPage = e => { setRowsPerPage(+e.target.value); setPage(0) }, refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1 }); window.location.reload() }, [openPopup, setOpenPopup] = useState(!1), openInPopup = (feedback_id, resident_id, account_id, feedback, date_submitted, first_name, middle_name, last_name, suffix) => { setOpenPopup(true); setFeedback(feedback); setDateSubmitted(date_submitted); setFirstName(first_name); setMiddleName(middle_name); setLastName(last_name); setSuffix(suffix); setFeedBackId(feedback_id); setResidentId(resident_id); }
    const delete_feedback_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.delete(`http://localhost:3001/deleteFeedback/${feedback_id}`).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setSuccessDialog({ isOpen: true, title: "Delete Feedback / Suggestion", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const delete_feedback = () => { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to delete this Feedback?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => delete_feedback_confirm()} className="alert_yesBtn"> Yes </button> }) }
    return (
        <div>
            <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <Notification notify={notify} setNotify={setNotify} />
            <PopUp title="Borrowed Facility" openPopup={openPopup} setOpenPopup={setOpenPopup}> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Full Name:</label> <input type="text" className="inputs" autoComplete="off" disabled value={first_name + " " + middle_name + " " + last_name + " " + suffix} required /> </div><div className="input_fields"> <label>Feedback:</label> <textarea type="text" className="textarea" autoComplete="off" style={{ height: "20rem" }} disabled value={feedback} required /> </div><div className="input_fields"> <label>Date Submitted</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_submitted} /></p></div></div></div><div className="add_resident_container_footer" id="mobile_hidden"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Delete" className="editProfile_btn" onClick={delete_feedback} /> </div></div></div></div></PopUp>
            <TableContainer component={Paper} className={classes.tableContainer}> <Table className={classes.table} aria-label="simple table"> <TableHead> <TableRow> <TableCell className={classes.tableHeaderCell}>Submitted By</TableCell> <TableCell className={classes.tableHeaderCell}>Date Submitted</TableCell> <TableCell className={classes.tableHeaderCell} id="mobile_hidden">Action</TableCell> </TableRow> </TableHead> <TableBody>{data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => { return (<TableRow > <TableCell style={{ cursor: 'pointer' }} onClick={() => openInPopup(row.feedback_id, row.resident_id, row.account_id, row.feedback, row.date_submitted, row.first_name, row.middle_name, row.last_name, row.suffix)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name} style={{ cursor: 'pointer' }}>{row.last_name + ", " + row.first_name + " " + row.middle_name + " " + row.suffix}</Typography> </Grid> </Grid> </TableCell> <TableCell className={classes.tableCell} onClick={() => openInPopup(row.feedback_id, row.resident_id, row.account_id, row.feedback, row.date_submitted, row.first_name, row.middle_name, row.last_name, row.suffix)}><p className="inputs"><Moment format={"MMMM DD, YYYY"} date={row.date_submitted} /></p></TableCell> <TableCell id="mobile_hidden"> <button className="view_edit" onClick={() => openInPopup(row.feedback_id, row.resident_id, row.account_id, row.feedback, row.date_submitted, row.first_name, row.middle_name, row.last_name, row.suffix)}><FaEdit /></button> </TableCell> </TableRow>) })}</TableBody> <TableFooter> <TablePagination rowsPerPageOptions={[5, 10, 15]} component="div" count={data.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} /> </TableFooter> </Table> </TableContainer>
        </div>
    )
}