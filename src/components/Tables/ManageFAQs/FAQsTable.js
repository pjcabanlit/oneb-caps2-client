import React, { useState } from 'react'
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Grid, Typography, TablePagination, TableFooter } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import ViewEditDialog from '../../Dialog/ViewEditDialog';
import Axios from 'axios'
import ConfirmDialog from './../../Dialog/ConfirmDialog';
import SuccessDialog from './../../Dialog/SuccessDialog';
import Notification from './../../Dialog/Notification';
import LoginAuthPop from './../../Dialog/LoginAuthPop';
import PopUp from '../../Dialog/PopUp';
import { FaEdit } from 'react-icons/fa';
import Moment from "react-moment";
const useStyles = makeStyles((theme) => ({ table: { minWidth: 200, }, tableContainer: { maxWidth: 1175, borderRadius: 0, }, tableHeaderCell: { fontWeight: 'bold', backgroundColor: '#0061a8', color: theme.palette.getContrastText(theme.palette.primary.dark), fontFamily: "Montserrat, sans-serif", cursor: "pointer", lineHeight: "1.43", paddingTop: "15px", paddingBottom: "15px" }, tableCell: { fontFamily: "Montserrat, sans-serif", cursor: "pointer", }, avatar: { backgroundColor: theme.palette.primary.light, color: theme.palette.getContrastText(theme.palette.primary.light) }, name: { cursor: "pointer", fontWeight: 'bold', color: "#2e4a56", fontFamily: "Montserrat, sans-serif" }, residentIdTitle: { fontSize: "15px" }, status: { fontWeight: 'bold', fontSize: '0.75rem', color: 'white', backgroundColor: 'grey', borderRadius: 5, padding: '3px 10px', display: 'inline-block', fontFamily: "Montserrat, sans-serif", }, pagination: { overflow: "hidden" } }))
export default function FAQsTable({ data }) {
    Axios.defaults.withCredentials = true;
    const classes = useStyles(), [page, setPage] = useState(0), [rowsPerPage, setRowsPerPage] = useState(5), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [faq_id, setFaqId] = useState(""), [question, setQuestion] = useState(""), [answer, setAnswer] = useState(""), [date_updated, setDateUpdated] = useState(""), [date_created, setDateCreated] = useState(""); var showdate = new Date(), displaytodaysdate = showdate.getFullYear() + "-" + (showdate.getMonth() + 1) + "-" + showdate.getDate(); const handleChangePage = (e, t) => { setPage(t) }, handleChangeRowsPerPage = e => { setRowsPerPage(+e.target.value); setPage(0) }, refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1 }); window.location.reload() };
    const delete_faq_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.delete(`http://localhost:3001/deleteFaq/${faq_id}`).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try agian.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setOpenPopup(false); setSuccessDialog({ isOpen: true, title: "Delete FAQ", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const delete_faq = () => { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want delete this FAQ?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => delete_faq_confirm()} className="alert_yesBtn"> Yes </button> }) }
    const update_faq_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.put("http://localhost:3001/updateFaq", { upFaq_question: question, upFaq_answer: answer, upFaq_dateToday: displaytodaysdate, upFaq_faqId: faq_id, }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try agian.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setOpenPopup(false); setSuccessDialog({ isOpen: true, title: "Update FAQ", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const update_faq = () => { if (!answer || !question) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "All fields are required.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: 'Are you sure you want to update this FAQ?', subtitle: 'Please double check all the information before updating FAQ.', noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn"> Back </button>, yesButton: <button onClick={update_faq_confirm} className="alert_yesBtn"> Yes </button>, }) } }, [openPopup, setOpenPopup] = useState(false), openInPopup = (faq_id, question, answer, date_updated, date_created) => { setOpenPopup(true); setFaqId(faq_id); setQuestion(question); setAnswer(answer); setDateUpdated(date_updated); setDateCreated(date_created); if (!openPopup) { setClick(false); } }, [click, setClick] = useState(false), edit = () => { setClick(true) }, back = () => { setClick(false) }
    return (
        <div>
            <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <Notification notify={notify} setNotify={setNotify} />
            <PopUp title="View / Edit FAQ" openPopup={openPopup} setOpenPopup={setOpenPopup}> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Question:<span className="text-danger">*</span></label> <textarea type="text" className="textarea" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={question} required onChange={(e) => setQuestion(e.target.value)} /> </div><div className="input_fields"> <label>Answer:<span className="text-danger">*</span></label> <textarea type="text" style={{ height: "20rem" }} className="textarea" required autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={answer} onChange={(e) => setAnswer(e.target.value)} /> </div><div className="input_fields"> <label>Date Created</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_created} /></p></div>{date_updated ? <div className="input_fields"> <label>Last Update</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_updated} /></p></div> : ""}</div></div><div className="add_resident_container_footer" id="mobile_hidden"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile">{click ? <> <div className="input_fields" > <input type="submit" value="Save Changes" className="editProfile_btn" onClick={update_faq} /> </div><div className="input_fields" > <input type="submit" value="Cancel Edit" className="editProfile_btn" onClick={back} /> </div></> : <> <div className="input_fields" > <input type="submit" value="Edit FAQ" className="editProfile_btn" onClick={edit} /> </div><div className="input_fields" > <input type="submit" value="Delete FAQ" className="editProfile_btn" onClick={delete_faq} /> </div></>}</div></div></div></PopUp>
            <TableContainer component={Paper} className={classes.tableContainer}> <Table className={classes.table} aria-label="simple table"> <TableHead> <TableRow> <TableCell className={classes.tableHeaderCell}>Question</TableCell> <TableCell className={classes.tableHeaderCell} id="mobile_hidden">Action</TableCell> </TableRow> </TableHead> <TableBody>{data.map((row) => { return (<TableRow > <TableCell style={{ cursor: 'pointer' }} onClick={() => openInPopup(row.faq_id, row.question, row.answer, row.date_updated, row.date_created)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name} style={{ cursor: 'pointer' }}>{row.question}</Typography> </Grid> </Grid> </TableCell> <TableCell id="mobile_hidden"> <button className="view_edit" onClick={() => openInPopup(row.faq_id, row.question, row.answer, row.date_updated, row.date_created)}><FaEdit /></button> </TableCell> </TableRow>) })}</TableBody> <TableFooter> <TablePagination rowsPerPageOptions={[5, 10, 15]} component={"span"} count={data.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} className={classes.pagination} /> </TableFooter> </Table> </TableContainer>
        </div>
    )
}
