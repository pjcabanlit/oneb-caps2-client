import React, { useState } from 'react'
import { useHistory } from 'react-router-dom';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Grid, Typography, TablePagination, TableFooter } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import ViewEditDialog from '../../../components/Dialog/ViewEditDialog';
import Axios from 'axios'
import ConfirmDialog from './../../Dialog/ConfirmDialog';
import SuccessDialog from './../../Dialog/SuccessDialog';
import Notification from './../../Dialog/Notification';
import LoginAuthPop from './../../Dialog/LoginAuthPop';
import PopUp from '../../../components/Dialog/PopUp';
import { FaEdit } from 'react-icons/fa';
import { Container, BoxUpload, ImagePreview } from "../../../components/Styled/ImageStyle";
import FolderIcon from "../../../images/folder_icon_transparent.png";
import CloseIcon from "../../../svg/CloseIcon.svg";
import Moment from 'react-moment';
const useStyles = makeStyles((theme) => ({ table: { minWidth: 200, }, tableContainer: { maxWidth: 1175, borderRadius: 0, }, tableHeaderCell: { fontWeight: 'bold', backgroundColor: '#0061a8', color: theme.palette.getContrastText(theme.palette.primary.dark), fontFamily: "Montserrat, sans-serif", cursor: "pointer", lineHeight: "1.43", paddingTop: "15px", paddingBottom: "15px" }, tableCell: { fontFamily: "Montserrat, sans-serif", cursor: "pointer", }, avatar: { backgroundColor: theme.palette.primary.light, color: theme.palette.getContrastText(theme.palette.primary.light) }, name: { cursor: "pointer", fontWeight: 'bold', color: "#2e4a56", fontFamily: "Montserrat, sans-serif" }, residentIdTitle: { fontSize: "15px" }, status: { fontWeight: 'bold', fontSize: '0.75rem', color: 'white', backgroundColor: 'grey', borderRadius: 5, padding: '3px 10px', display: 'inline-block', fontFamily: "Montserrat, sans-serif", } }))
export default function CancelledTable({ data }) {
    Axios.defaults.withCredentials = true;
    const classes = useStyles(), history = useHistory(), [page, setPage] = useState(0), [rowsPerPage, setRowsPerPage] = useState(5), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [program_id, setProgramId] = useState(""), [program_title, setProgramTitle] = useState(""), [program_desc, setProgramDesc] = useState(""), [program_date, setProgramDate] = useState(""), [program_time, setProgramTime] = useState(""), [date_created, setDateCreated] = useState(""), [status, setStatus] = useState(""), [remarks, setRemarks] = useState(""), [date_cancelled, setDateCancelled] = useState(""), [image, setImage] = useState(""), [end_date, setEndDate] = useState(""), handleChangePage = (e, t) => { setPage(t) }, handleChangeRowsPerPage = e => { setRowsPerPage(+e.target.value); setPage(0) }, refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1 }); history.push("/manage-programs-events") }, [openPopup, setOpenPopup] = useState(!1), [isUploaded, setIsUploaded] = useState(!1), [typeFile, setTypeFile] = useState(""), openInPopup = (prog_ev_end_date, prog_ev_id, prog_evt_title, prog_ev_desc, prog_ev_date, prog_ev_time, date_created, status, remarks, date_cancelled) => { setOpenPopup(true); setProgramId(prog_ev_id); setProgramTitle(prog_evt_title); setProgramTime(prog_ev_time); setProgramDesc(prog_ev_desc); setProgramDate(prog_ev_date); setDateCreated(date_created); setStatus(status); setRemarks(remarks); setDateCancelled(date_cancelled); setEndDate(prog_ev_end_date); }
    const delete_progev_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.delete(`http://localhost:3001/deleteCancelledProgram/${program_id}`).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setOpenPopup(false); setSuccessDialog({ isOpen: true, title: "Delete Program/Event", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const delete_progev = () => { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to delete this Program/Event?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => delete_progev_confirm()} className="alert_yesBtn"> Yes </button> }) }
    const handleImageChange = (e) => { if (e.target.files && e.target.files[0]) { setTypeFile(e.target.files[0].type); let reader = new FileReader(); reader.onload = function (e) { setImage(e.target.result); setIsUploaded(true); }; reader.readAsDataURL(e.target.files[0]); } };
    return (
        <div>
            <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <Notification notify={notify} setNotify={setNotify} />
            <PopUp title="View Cancelled Program/Event" openPopup={openPopup} setOpenPopup={setOpenPopup}> <Container style={{ marginBottom: "10px" }}> <BoxUpload> <div className="image-upload">{!isUploaded ? (<> <label htmlFor="upload-input"> <img src={FolderIcon} draggable={"false"} alt="placeholder" style={{ width: 100, height: 100 }} /> <p style={{ color: "#444" }}> Click to upload image </p></label> <input id="upload-input" type="file" disabled accept=".jpg,.jpeg,.gif,.png,.mov,.mp4" onChange={(e) => handleImageChange(e)} /> </>) : (<ImagePreview> <img className="close-icon" src={CloseIcon} alt="CloseIcon" onClick={() => { setIsUploaded(false); setImage(null); }} />{typeFile.includes("video") ? (<video id="uploaded-image" src={image} draggable={false} controls autoPlay alt="uploaded-img" />) : (<img id="uploaded-image" src={image} draggable={false} alt="uploaded-img" />)}</ImagePreview>)}</div></BoxUpload> </Container> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Program/Event Title</label> <input type="text" className="inputs" autoComplete="off" disabled defaultValue={program_title} required onChange={(e) => setProgramTitle(e.target.value)} /> </div><div className="input_fields"> <label>Description</label> <textarea type="text" style={{ height: "20rem" }} className="textarea" required autoComplete="off" disabled defaultValue={program_desc} onChange={(e) => setProgramDesc(e.target.value)} /> </div><div className="input_fields"> <label>Program Start Date</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={program_date} /></p></div>{program_time ? <div className="input_fields"> <label>Program Time</label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={program_time} onChange={(e) => setProgramTime(e.target.value)} /> </div> : ""}{end_date ? <div className="input_fields"> <label>Program End Date</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={end_date} /></p></div> : ""}<div className="input_fields"> <label>Date Created</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_created} /></p></div><div className="input_fields"> <label>Status</label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={status} onChange={(e) => setStatus(e.target.value)} /> </div><div className="input_fields"> <label>Remarks</label> <textarea type="text" className="textarea" style={{ height: "20rem" }} required autoComplete="off" disabled defaultValue={remarks} onChange={(e) => setRemarks(e.target.value)} /> </div><div className="input_fields"> <label>Date Cancelled</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_cancelled} /></p></div></div></div><div className="add_resident_container_footer" id="mobile_hidden"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Delete Program/Event" className="editProfile_btn" onClick={delete_progev} /> </div></div></div></div></PopUp>
            <TableContainer component={Paper} className={classes.tableContainer}> <Table className={classes.table} aria-label="simple table"> <TableHead> <TableRow> <TableCell className={classes.tableHeaderCell}>Program/Event Title</TableCell> <TableCell className={classes.tableHeaderCell}>When</TableCell> <TableCell className={classes.tableHeaderCell}>Date Created</TableCell> <TableCell className={classes.tableHeaderCell}>Status</TableCell> <TableCell className={classes.tableHeaderCell} id="mobile_hidden" >Action</TableCell> </TableRow> </TableHead> <TableBody>{data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => { return (<TableRow > <TableCell style={{ cursor: 'pointer' }} onClick={() => openInPopup(row.prog_ev_id, row.prog_evt_title, row.prog_ev_desc, row.prog_ev_date, row.prog_ev_time, row.date_created, row.quantity, row.status, row.remarks, row.date_cancelled)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name} style={{ cursor: 'pointer' }}>{row.prog_evt_title}</Typography> </Grid> </Grid> </TableCell> <TableCell className={classes.tableCell}> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={row.prog_ev_date} /></p></TableCell> <TableCell className={classes.tableCell}> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={row.date_created} /></p></TableCell> <TableCell> <Typography className={classes.status} style={{ backgroundColor: 'red' }}>{row.status}</Typography></TableCell> <TableCell id="mobile_hidden"> <button className="view_edit" onClick={() => openInPopup(row.prog_ev_end_date, row.prog_ev_id, row.prog_evt_title, row.prog_ev_desc, row.prog_ev_date, row.prog_ev_time, row.date_created, row.status, row.remarks, row.date_cancelled)}><FaEdit /></button> </TableCell> </TableRow>) })}</TableBody> <TableFooter> <TablePagination rowsPerPageOptions={[5, 10, 15]} component="div" count={data.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} /> </TableFooter> </Table> </TableContainer>
        </div>
    )
}