import React, { useState } from 'react'
import { useHistory } from 'react-router-dom'
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Grid, Typography, TablePagination, TableFooter } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import ViewEditDialog from '../../../components/Dialog/ViewEditDialog';
import Axios from 'axios'
import ConfirmDialog from './../../Dialog/ConfirmDialog';
import SuccessDialog from './../../Dialog/SuccessDialog';
import Notification from './../../Dialog/Notification';
import LoginAuthPop from './../../Dialog/LoginAuthPop';
import PopUp from '../../../components/Dialog/PopUp';
import { FaEdit } from 'react-icons/fa';
import Decline from '../../Dialog/Decline';
import { Container, BoxUpload, ImagePreview } from "../../../components/Styled/ImageStyle";
import FolderIcon from "../../../images/folder_icon_transparent.png";
import CloseIcon from "../../../svg/CloseIcon.svg";
import Moment from 'react-moment';
import moment from 'moment'
const useStyles = makeStyles((theme) => ({ table: { minWidth: 200, }, tableContainer: { maxWidth: 1175, borderRadius: 0, }, tableHeaderCell: { fontWeight: 'bold', backgroundColor: '#0061a8', color: theme.palette.getContrastText(theme.palette.primary.dark), fontFamily: "Montserrat, sans-serif", cursor: "pointer", lineHeight: "1.43", paddingTop: "15px", paddingBottom: "15px" }, tableCell: { fontFamily: "Montserrat, sans-serif", cursor: "pointer", }, avatar: { backgroundColor: theme.palette.primary.light, color: theme.palette.getContrastText(theme.palette.primary.light) }, name: { cursor: "pointer", fontWeight: 'bold', color: "#2e4a56", fontFamily: "Montserrat, sans-serif" }, residentIdTitle: { fontSize: "15px" }, status: { fontWeight: 'bold', fontSize: '0.75rem', color: 'white', backgroundColor: 'grey', borderRadius: 5, padding: '3px 10px', display: 'inline-block', fontFamily: "Montserrat, sans-serif", } }))
export default function UpcomingTable({ data }) {
    Axios.defaults.withCredentials = true;
    const history = useHistory(), classes = useStyles(), [page, setPage] = useState(0), [rowsPerPage, setRowsPerPage] = useState(5), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [program_id, setProgramId] = useState(""), [program_title, setProgramTitle] = useState(""), [program_desc, setProgramDesc] = useState(""), [program_date, setProgramDate] = useState(""), [program_loc, setProgramLoc] = useState(""), [program_time, setProgramTime] = useState(""), [program_endDate, setProgramEndDate] = useState(""), [date_created, setDateCreated] = useState(""), [status, setStatus] = useState(""), [remarks, setRemarks] = useState(""), [, setImage] = useState(""), [progEvImg, setProgEvImg] = useState(""), handleChangePage = (e, t) => { setPage(t) }, handleChangeRowsPerPage = e => { setRowsPerPage(+e.target.value); setPage(0) }, refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1 }); history.push("/manage-programs-events") }, [openPopup, setOpenPopup] = useState(!1), [declineDailog, setDeclineDialog] = useState(!1), [click, setClick] = useState(!1), edit_progev = () => { setClick(!0) }, back = () => { setClick(!1) }, cancel_progev = () => { setDeclineDialog(!0) }, [isUploaded, setIsUploaded] = useState(!0), [, setTypeFile] = useState(""), [postImage, setPostImage] = useState("");
    var showdate = new Date(), displaytodaysdate = showdate.getFullYear() + '-' + (showdate.getMonth() + 1) + '-' + showdate.getDate();
    const set_complete_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.put("http://localhost:3001/completeProgramEvent", { c_progEv_id: program_id, }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setOpenPopup(false); setSuccessDialog({ isOpen: true, title: "Complete Program/Event", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }); }
    const set_complete = () => { if (!program_title || !program_desc || !program_date || !status || !date_created) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Required fields must not be empty", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to update this Program/Event", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => set_complete_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    const update_progrev_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.put("http://localhost:3001/updateProgramEvent", { updateProgEv_id: program_id, updateProgEv_title: program_title, updateProgEv_desc: program_desc, updateProgEv_sDate: program_date, updateProgEv_time: program_time, updateProgEv_eDate: program_endDate, updateProgEv_img: postImage, updateProgEv_loc: program_loc }).then((response) => { if (response.data.err || response.data.err2) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success || response.data.success2) { setOpenPopup(false); setSuccessDialog({ isOpen: true, title: "Update Program/Event", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }); }
    const update_progev = () => { if (!program_title || !program_desc || !program_date || !status || !date_created) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Required fields must not be empty", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to update this Program/Event", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => update_progrev_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    const cancel_progrev_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.put("http://localhost:3001/cancelProgramEvent", { cancel_date: displaytodaysdate, cancel_remarks: remarks, cancel_programId: program_id }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setOpenPopup(false); setDeclineDialog(false); setSuccessDialog({ isOpen: true, title: "Cancel Program/Event", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }); }
    const cancel_progrev_verify = () => { if (!remarks) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Remarks is required.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to cancel this request?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => cancel_progrev_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    const delete_progev_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.delete(`http://localhost:3001/deleteUpcomingProgEv/${program_id}`).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setSuccessDialog({ isOpen: true, title: "Delete Program/Event", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const delete_progev = () => { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to delete this Program/Event?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => delete_progev_confirm()} className="alert_yesBtn"> Yes </button> }) }
    const convertToBase64 = (file) => { return new Promise((resolve, reject) => { const fileReader = new FileReader(); fileReader.readAsDataURL(file); fileReader.onload = () => { const base64String = fileReader.result.replace("data:", "").replace(/^.+,/, ""); resolve(base64String); }; fileReader.onerror = (error) => { reject(error); }; }); };
    const handleFileUpload = async (e) => { const file = e.target.files[0]; const base64 = await convertToBase64(file); setPostImage(base64); setIsUploaded(false); if (e.target.files && e.target.files[0]) { setTypeFile(e.target.files[0].type); let reader = new FileReader(); reader.onload = function (e) { setImage(e.target.result); setIsUploaded(true); }; reader.readAsDataURL(e.target.files[0]); } else { setImage(e.target.value); } };
    const openInPopup = (end_date, prog_ev_id, prog_evt_title, prog_ev_desc, prog_ev_date, prog_ev_time, date_created, status, prog_ev_img, program_loc) => { setOpenPopup(true); setProgramEndDate(end_date); setProgramId(prog_ev_id); setProgramTitle(prog_evt_title); setProgramDesc(prog_ev_desc); setProgramDate(prog_ev_date); setProgramTime(prog_ev_time); setDateCreated(date_created); setStatus(status); setProgEvImg(prog_ev_img); setProgramLoc(program_loc); if (!openPopup) { setClick(false); } }
    return (
        <div>
            <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <Notification notify={notify} setNotify={setNotify} />
            <Decline title="Cancel Program/Event" openPopup={declineDailog} setOpenPopup={setDeclineDialog}> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <p style={{ marginBottom: "15px" }}> Please give remarks why this Program/Event is being cancelled. </p><div className="input_fields"> <label>Remarks:<span className="text-danger">*</span></label> <textarea type="text" className="textarea" autoComplete="off" required onChange={(e) => setRemarks(e.target.value)} /> </div></div></div><div className="add_resident_container_footer"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Submit" className="btn" onClick={cancel_progrev_verify} /> </div></div></div></div></Decline>
            <PopUp title="Program/Event Details" openPopup={openPopup} setOpenPopup={setOpenPopup}> <Container> <BoxUpload> <div className="image-upload">{!isUploaded ? (<> <label htmlFor="upload-input"> <img src={FolderIcon} draggable={"false"} alt="placeholder" style={{ width: 100, height: 100 }} /> <p style={{ color: "#444" }}> Click to upload image </p></label> <input id="upload-input" type="file" accept=".jpg,.jpeg,.gif,.png,.mov,.mp4" onChange={(e) => handleFileUpload(e)} /> </>) : (<ImagePreview>{click ? <img className="close-icon" src={CloseIcon} alt="CloseIcon" disabled={click ? "" : "disabled"} onClick={() => { setIsUploaded(false); setProgEvImg(null); }} /> : ""}{progEvImg != null ? (<img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(progEvImg)}`} draggable={false} alt="uploaded-img" />) : (<img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(postImage)}`} draggable={false} alt="uploaded-img" />)}</ImagePreview>)}</div></BoxUpload> </Container> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Program/Event Title:<span className="text-danger">*</span></label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={program_title} required onChange={(e) => setProgramTitle(e.target.value)} /> </div><div className="input_fields"> <label>Description:<span className="text-danger">*</span></label> <textarea type="text" className="textarea" style={{ height: "20rem" }} required autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={program_desc} onChange={(e) => setProgramDesc(e.target.value)} /> </div><div className="input_fields"> <label>Program/Event Location:</label> <textarea type="text" className="textarea" style={{ height: "20rem" }} required autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={program_loc} onChange={(e) => setProgramLoc(e.target.value)} /> </div>{click ? <> <div className="input_fields"> <label>Start Date:<span className="text-danger">*</span></label> <input type="date" className="inputs" required autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={moment(program_date).format('YYYY-DD-MM')} onChange={(e) => setProgramDate(e.target.value)} /> </div><div className="input_fields"> <label>End Date:</label> <input type="date" className="inputs" required autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={moment(program_endDate).format('YYYY-DD-MM')} onChange={(e) => setProgramEndDate(e.target.value)} /> </div><div className="input_fields"> <label>Program Time</label> <input type="time" className="inputs" required autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={moment(program_time).format('h:mm:ss')} onChange={(e) => setProgramTime(e.target.value)} /> </div></> : <> <div className="input_fields"> <label>Program Start Date</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={program_date} /></p></div>{program_endDate ? <div className="input_fields"> <label>Program End Date</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={program_endDate} /></p></div> : ""}{program_time ? <div className="input_fields"> <label>Program Time</label> <input type="text" className="inputs" required autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={program_time} /> </div> : ""}</>}<div className="input_fields"> <label>Status:<span className="text-danger">*</span></label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={status} onChange={(e) => setStatus(e.target.value)} /> </div><div className="input_fields"> <label>Date Created</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_created} /></p></div></div></div><div className="add_resident_container_footer" id="mobile_hidden"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile">{click ? <> <div className="input_fields" > <input type="submit" value="Save Changes" className="editProfile_btn" onClick={update_progev} /> </div><div className="input_fields" > <input type="submit" value="Cancel Edit" className="editProfile_btn" onClick={back} /> </div></> : <> <div className="input_fields" > <input type="submit" value="Edit Program" className="editProfile_btn" onClick={edit_progev} /> </div><div className="input_fields" > <input type="submit" value="Complete Program" className="editProfile_btn" onClick={set_complete} /> </div><div className="input_fields" > <input type="submit" value="Cancel Program" className="editProfile_btn" onClick={cancel_progev} /> </div><div className="input_fields" > <input type="submit" value="Delete Program" className="editProfile_btn" onClick={delete_progev} /> </div></>}</div></div></div></PopUp>
            <TableContainer component={Paper} className={classes.tableContainer}> <Table className={classes.table} aria-label="simple table"> <TableHead> <TableRow> <TableCell className={classes.tableHeaderCell}>Program/Event Title</TableCell> <TableCell className={classes.tableHeaderCell}>When</TableCell> <TableCell className={classes.tableHeaderCell}>Date Created</TableCell> <TableCell className={classes.tableHeaderCell}>Status</TableCell> <TableCell className={classes.tableHeaderCell} id="mobile_hidden" >Action</TableCell> </TableRow> </TableHead> <TableBody>{data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => { return (<TableRow > <TableCell style={{ cursor: 'pointer' }} onClick={() => openInPopup(row.prog_ev_end_date, row.prog_ev_id, row.prog_evt_title, row.prog_ev_desc, row.prog_ev_date, row.prog_ev_time, row.date_created, row.status, row.prog_ev_img, row.prog_ev_location)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name} style={{ cursor: 'pointer' }}>{row.prog_evt_title}</Typography> </Grid> </Grid> </TableCell> <TableCell className={classes.tableCell}> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={row.prog_ev_date} /></p></TableCell> <TableCell className={classes.tableCell}> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={row.date_created} /></p></TableCell> <TableCell> <Typography className={classes.status} style={{ backgroundColor: '#0061a8' }}>{row.status}</Typography></TableCell> <TableCell id="mobile_hidden"> <button className="view_edit" onClick={() => openInPopup(row.prog_ev_end_date, row.prog_ev_id, row.prog_evt_title, row.prog_ev_desc, row.prog_ev_date, row.prog_ev_time, row.date_created, row.status, row.prog_ev_img, row.prog_ev_location)}><FaEdit /></button> </TableCell> </TableRow>) })}</TableBody> <TableFooter> <TablePagination rowsPerPageOptions={[5, 10, 15]} component="div" count={data.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} /> </TableFooter> </Table> </TableContainer>
        </div>
    )
}