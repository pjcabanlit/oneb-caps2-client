import React, { useState } from 'react'
import { useHistory } from 'react-router-dom'
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Grid, Typography, TablePagination, TableFooter } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import ViewEditDialog from '../../../components/Dialog/ViewEditDialog';
import Axios from 'axios'
import ConfirmDialog from './../../Dialog/ConfirmDialog';
import SuccessDialog from './../../Dialog/SuccessDialog';
import Notification from './../../Dialog/Notification';
import LoginAuthPop from './../../Dialog/LoginAuthPop';
import PopUp from '../../../components/Dialog/PopUp';
import { FaEdit } from 'react-icons/fa';
import Decline from '../../Dialog/Decline';
import Moment from "react-moment";

const useStyles = makeStyles((theme) => ({ table: { minWidth: 200, }, tableContainer: { maxWidth: 1175, borderRadius: 0, }, tableHeaderCell: { fontWeight: 'bold', backgroundColor: '#0061a8', color: theme.palette.getContrastText(theme.palette.primary.dark), fontFamily: "Montserrat, sans-serif", cursor: "pointer", lineHeight: "1.43", paddingTop: "15px", paddingBottom: "15px" }, tableCell: { fontFamily: "Montserrat, sans-serif", cursor: "pointer", }, avatar: { backgroundColor: theme.palette.primary.light, color: theme.palette.getContrastText(theme.palette.primary.light) }, name: { cursor: "pointer", fontWeight: 'bold', color: "#2e4a56", fontFamily: "Montserrat, sans-serif" }, residentIdTitle: { fontSize: "15px" }, status: { fontWeight: 'bold', fontSize: '0.75rem', color: 'white', backgroundColor: 'grey', borderRadius: 5, padding: '3px 10px', display: 'inline-block', fontFamily: "Montserrat, sans-serif", }, pagination: { overflow: "hidden" } }))

export default function ReservationTable({ data }) {
    Axios.defaults.withCredentials = true;
    const classes = useStyles(), history = useHistory(), [page, setPage] = useState(0), [rowsPerPage, setRowsPerPage] = useState(5), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [full_name, setFullName] = useState(""), [address, setAddress] = useState(""), [contact, setContact] = useState(""), [date_need, setDateNeed] = useState(""), [item, setItem] = useState(""), [location, setLocation] = useState(""), [date_requested, setDateRequested] = useState(""), [status, setStatus] = useState(""), [purpose, setPurpose] = useState(""), [quantity, setQuantity] = useState(""), [request_facilityId, setRequestFacilityId] = useState(""), [remarks, setRemarks] = useState(""), handleChangePage = (e, t) => { setPage(t) }, handleChangeRowsPerPage = e => { setRowsPerPage(+e.target.value); setPage(0) }, refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1 }); history.push("/Reservations-&-Requests") }, [openPopup, setOpenPopup] = useState(false), [declineDailog, setDeclineDialog] = useState(false), decline_notice = () => { setDeclineDialog(true); }
    var showdate = new Date(), displaytodaysdate = showdate.getFullYear() + '-' + (showdate.getMonth() + 1) + '-' + showdate.getDate();
    const borrow_facility_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.put("http://localhost:3001/BorrowFacility", { borrow_quantity: quantity, borrow_reqFacilityId: request_facilityId, borrow_dateBorrow: displaytodaysdate, borrow_fitem: item, }).then((response) => { if (response.data.msg) { setOpenPopup(false); setSuccessDialog({ isOpen: true, title: "Facility Request", subtitle: response.data.msg, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Unable to connect", subtitle: "Please contact your administrator", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }); }
    const borrow_facility = () => { const numberOnly_format = /^\d+$/; const stringOnly_format = /^[a-zA-Z\s]*$/; const contact_format = /^(09|\+639)\d{9}$/; if (!full_name || !address || !contact || !date_need || !item || !quantity || !status || !purpose) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Required fields must not be empty", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!stringOnly_format.test(String(full_name).toLowerCase())) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Name should be letters only.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!numberOnly_format.test(String(quantity))) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Quantity should be a number.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!contact_format.test(String(contact))) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Incorrect Contact Number format.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to approve this request?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => borrow_facility_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    const openInPopup = (req_facility_id, address, contact, date_need, item, location, quantity, date_requested, status, purpose, suffix, first_name, middle_name, last_name) => { setOpenPopup(true); setRequestFacilityId(req_facility_id); setFullName(first_name + " " + (middle_name === null ? " " : middle_name) + " " + last_name + " " + (suffix === null ? " " : suffix)); setAddress(address); setContact(contact); setDateNeed(date_need); setItem(item); setLocation(location); setQuantity(quantity); setDateRequested(date_requested); setStatus(status); setPurpose(purpose); }
    const decline_facility_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.put("http://localhost:3001/declinefacilityrequest", { decline_facilityId: request_facilityId, decline_date: displaytodaysdate, decline_remarks: remarks, }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.msg) { setOpenPopup(false); setDeclineDialog(false); setSuccessDialog({ isOpen: true, title: "Request Declined Successfully.", subtitle: "", noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } }); }
    const decline_facility = () => { if (!remarks) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Remarks is required.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to decline this request?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => decline_facility_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    return (
        <div>
            <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <Notification notify={notify} setNotify={setNotify} />
            <Decline title="Decline Request" openPopup={declineDailog} setOpenPopup={setDeclineDialog}> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <p style={{ marginBottom: "15px" }}> Please state the reason why this facility is being declined. </p><div className="input_fields"> <label>Remarks:<span className="text-danger">*</span></label> <textarea type="text" className="textarea" autoComplete="off" required onChange={(e) => setRemarks(e.target.value)} /> </div></div></div><div className="add_resident_container_footer"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Submit" className="btn" onClick={decline_facility} /> </div></div></div></div></Decline>
            <PopUp title="Facility Request" openPopup={openPopup} setOpenPopup={setOpenPopup}> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Full Name:<span className="text-danger">*</span></label> <input type="text" className="inputs" autoComplete="off" disabled defaultValue={full_name} required onChange={(e) => setFullName(e.target.value)} /> </div><div className="input_fields"> <label>Address:<span className="text-danger">*</span></label> <textarea type="text" className="textarea" required autoComplete="off" disabled defaultValue={address} onChange={(e) => setAddress(e.target.value)} /> </div><div className="input_fields"> <label>Contact:<span className="text-danger">*</span></label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={contact} onChange={(e) => setContact(e.target.value)} /> </div><div className="input_fields"> <label>Date Needed</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_need} /></p></div><div className="input_fields"> <label>Facility:<span className="text-danger">*</span></label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={item} onChange={(e) => setItem(e.target.value)} /> </div>{location ? <div className="input_fields"> <label>Facility Location:<span className="text-danger">*</span></label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={location} onChange={(e) => setLocation(e.target.value)} /> </div> : ""}<div className="input_fields"> <label>Quantity:<span className="text-danger">*</span></label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={quantity} onChange={(e) => setQuantity(e.target.value)} /> </div><div className="input_fields"> <label>Date Requested</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_requested} /></p></div><div className="input_fields"> <label>Status:<span className="text-danger">*</span></label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={status} onChange={(e) => setStatus(e.target.value)} /> </div><div className="input_fields"> <label>Purpose:<span className="text-danger">*</span></label> <input type="text" className="inputs" required autoComplete="off" disabled defaultValue={purpose} onChange={(e) => setPurpose(e.target.value)} /> </div></div></div><div className="add_resident_container_footer" id="mobile_hidden"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Approve Request" className="editProfile_btn" onClick={borrow_facility} /> </div><div className="input_fields" > <input type="submit" value="Decline Request" className="editProfile_btn" onClick={decline_notice} /> </div></div></div></div></PopUp>
            <TableContainer component={Paper} className={classes.tableContainer}> <Table className={classes.table} aria-label="simple table"> <TableHead> <TableRow> <TableCell className={classes.tableHeaderCell}>Last Name</TableCell> <TableCell className={classes.tableHeaderCell}>First Name</TableCell> <TableCell className={classes.tableHeaderCell}>Middle Name</TableCell> <TableCell className={classes.tableHeaderCell}>Date Requested</TableCell> <TableCell className={classes.tableHeaderCell}>Facility</TableCell> <TableCell className={classes.tableHeaderCell}>Status</TableCell> <TableCell className={classes.tableHeaderCell} id="mobile_hidden" >Action</TableCell> </TableRow> </TableHead> <TableBody>{data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => { return (<TableRow > <TableCell style={{ cursor: 'pointer' }} onClick={() => openInPopup(row.req_facility_id, row.address, row.contact, row.date_need, row.item, row.facility_location, row.quantity, row.date_requested, row.item_status, row.purpose, row.suffix, row.first_name, row.middle_name, row.last_name)} id="last_name"> <Grid container> <Grid item lg={10}> <Typography className={classes.name} style={{ cursor: 'pointer' }}>{row.last_name}</Typography> </Grid> </Grid> </TableCell> <TableCell style={{ cursor: 'pointer' }} onClick={() => openInPopup(row.req_facility_id, row.address, row.contact, row.date_need, row.item, row.facility_location, row.quantity, row.date_requested, row.item_status, row.purpose, row.suffix, row.first_name, row.middle_name, row.last_name)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name} style={{ cursor: 'pointer' }}>{row.first_name}</Typography> </Grid> </Grid> </TableCell> <TableCell style={{ cursor: 'pointer' }} onClick={() => openInPopup(row.req_facility_id, row.address, row.contact, row.date_need, row.item, row.facility_location, row.quantity, row.date_requested, row.item_status, row.purpose, row.suffix, row.first_name, row.middle_name, row.last_name)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name} style={{ cursor: 'pointer' }}>{row.middle_name}</Typography> </Grid> </Grid> </TableCell> <TableCell style={{ cursor: 'pointer' }} onClick={() => openInPopup(row.req_facility_id, row.address, row.contact, row.date_need, row.item, row.facility_location, row.quantity, row.date_requested, row.item_status, row.purpose, row.suffix, row.first_name, row.middle_name, row.last_name)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name} style={{ cursor: 'pointer' }}><Moment format={"MMMM DD, YYYY"} date={row.date_requested} /></Typography> </Grid> </Grid> </TableCell> <TableCell className={classes.tableCell}>{row.item}</TableCell> <TableCell> <Typography className={classes.status} style={{ backgroundColor: ((row.item_status === "Borrowed" && 'green') || (row.item_status === "Pending" && '#F29339') || (row.item_status === "Returned" && '#0061a8')) }}>{row.item_status}</Typography></TableCell> <TableCell id="mobile_hidden"> <button className="view_edit" onClick={() => openInPopup(row.req_facility_id, row.address, row.contact, row.date_need, row.item, row.facility_location, row.quantity, row.date_requested, row.item_status, row.purpose, row.suffix, row.first_name, row.middle_name, row.last_name)}><FaEdit /></button> </TableCell> </TableRow>) })}</TableBody> <TableFooter> <TablePagination component="span" rowsPerPageOptions={[5, 10, 15]} count={data.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} className={classes.pagination} /> </TableFooter> </Table> </TableContainer>
        </div>
    )
}