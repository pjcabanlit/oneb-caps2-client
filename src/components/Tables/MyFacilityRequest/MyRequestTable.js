/* eslint-disable no-lone-blocks */
import React, { useState } from 'react'
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography, Grid, TablePagination, TableFooter } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import { FaEdit } from 'react-icons/fa';
import Axios from 'axios'
import Notification from '../../Dialog/Notification';
import ConfirmDialog from '../../Dialog/ConfirmDialog';
import ViewEditDialog from '../../Dialog/ViewEditDialog';
import SuccessDialog from '../../Dialog/SuccessDialog';
import LoginAuthPop from '../../Dialog/LoginAuthPop';
import SuccessRegisterDialog from '../../Dialog/SuccessRegisterDialog';
import PopUp from '../../Dialog/PopUp'
import { Container, BoxUpload, ImagePreview } from "./../../../components/Styled/ImageStyle";
import FolderIcon from "../../../images/folder_icon_transparent.png";
import '../Tables.css'
import Moment from 'react-moment';
const useStyles = makeStyles((theme) => ({ table: { minWidth: 200, }, tableContainer: { maxWidth: 1175, borderRadius: 0, border: "0.5px solid #d5dbd9" }, tableHeaderCell: { fontWeight: 'bold', backgroundColor: '#0061a8', color: theme.palette.getContrastText(theme.palette.primary.dark), fontFamily: "Montserrat, sans-serif", cursor: "pointer", lineHeight: "1.43", paddingTop: "15px", paddingBottom: "15px" }, tableCell: { fontFamily: "Montserrat, sans-serif", cursor: "pointer", }, avatar: { backgroundColor: theme.palette.primary.light, color: theme.palette.getContrastText(theme.palette.primary.light) }, name: { cursor: "pointer", fontWeight: 'bold', color: "#2e4a56", fontFamily: "Montserrat, sans-serif" }, residentIdTitle: { fontSize: "15px" }, status: { fontWeight: 'bold', fontSize: '0.75rem', color: 'white', backgroundColor: 'grey', borderRadius: 5, padding: '3px 10px', display: 'inline-block', fontFamily: "Montserrat, sans-serif", }, tablePagination: { overflow: "hidden" } }))
export default function MyRequestTable({ data }) {
    Axios.defaults.withCredentials = true;
    const [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successRegisterDialog, setSuccessRegisterDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), classes = useStyles(), [, setRequestId] = useState(""), [, setFullName] = useState(""), [address, setAddress] = useState(""), [contact, setContact] = useState(""), [date_borrowed, setDateBorrowed] = useState(""), [date_need, setDateNeed] = useState(""), [item, setItem] = useState(""), [quantity, setQuantity] = useState(""), [date_requested, setDateRequested] = useState(""), [status, setStatus] = useState(""), [purpose, setPurpose] = useState(""), [, setFacilityName] = useState(""), [facility_image, setFacilityImage] = useState(""), [openPopup, setOpenPopup] = useState(!1), [date_declined, setDateDeclined] = useState(""), [remarks, setRemarks] = useState(""), [date_returned, setDateReturned] = useState(""); const [page, setPage] = useState(0), [rowsPerPage, setRowsPerPage] = useState(5), handleChangePage = (event, newPage) => { setPage(newPage); }, handleChangeRowsPerPage = (event) => { setRowsPerPage(+event.target.value); setPage(0); }, [, setImage] = useState(""), [isUploaded, setIsUploaded] = useState(true), [, setTypeFile] = useState(""), [postImage, setPostImage] = useState("");
    function openBorrowedPopup(date_borrowed, req_facility_id, full_name, address, contact, date_need, item, quantity, date_requested, status, purpose, facility_name, facility_img) { setOpenPopup(true); setRequestId(req_facility_id); setFullName(full_name); setAddress(address); setContact(contact); setDateNeed(date_need); setItem(item); setQuantity(quantity); setDateRequested(date_requested); setStatus(status); setPurpose(purpose); setFacilityName(facility_name); setFacilityImage(facility_img); setDateBorrowed(date_borrowed); }
    function openDeclinedPopup(date_declined, remarks, full_name, address, contact, date_need, item, quantity, date_requested, purpose, facility_name, facility_img) { setOpenPopup(true); setFullName(full_name); setAddress(address); setContact(contact); setDateNeed(date_need); setQuantity(quantity); setDateRequested(date_requested); setPurpose(purpose); setFacilityName(facility_name); setFacilityImage(facility_img); setDateDeclined(date_declined); setRemarks(remarks); }
    function openReturnedPopup(date_returned, date_borrowed, req_facility_id, full_name, address, contact, date_need, item, quantity, date_requested, status, purpose, facility_name, facility_img) { setOpenPopup(true); setRequestId(req_facility_id); setFullName(full_name); setAddress(address); setContact(contact); setDateNeed(date_need); setItem(item); setQuantity(quantity); setDateRequested(date_requested); setStatus(status); setPurpose(purpose); setFacilityName(facility_name); setFacilityImage(facility_img); setDateBorrowed(date_borrowed); setDateReturned(date_returned); }
    function openPendingPopup(req_facility_id, full_name, address, contact, date_need, item, quantity, date_requested, status, purpose, facility_name, facility_img) { setOpenPopup(true); setRequestId(req_facility_id); setFullName(full_name); setAddress(address); setContact(contact); setDateNeed(date_need); setItem(item); setQuantity(quantity); setDateRequested(date_requested); setStatus(status); setPurpose(purpose); setFacilityName(facility_name); setFacilityImage(facility_img); }
    const convertToBase64 = (file) => { return new Promise((resolve, reject) => { const fileReader = new FileReader(); fileReader.readAsDataURL(file); fileReader.onload = () => { const base64String = fileReader.result.replace("data:", "").replace(/^.+,/, ""); resolve(base64String); }; fileReader.onerror = (error) => { reject(error); }; }); };
    const handleFileUpload = async (e) => { const file = e.target.files[0]; const base64 = await convertToBase64(file); setPostImage(base64); setIsUploaded(false); if (e.target.files && e.target.files[0]) { setTypeFile(e.target.files[0].type); let reader = new FileReader(); reader.onload = function (e) { setImage(e.target.result); setIsUploaded(true); }; reader.readAsDataURL(e.target.files[0]); } else { setImage(e.target.value); } };
    return (
        <div>
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <SuccessRegisterDialog successRegisterDialog={successRegisterDialog} setSuccessRegisterDialog={setSuccessRegisterDialog} />
            <Notification notify={notify} setNotify={setNotify} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <PopUp title="Facility Request" openPopup={openPopup} setOpenPopup={setOpenPopup}> <div className="borrowed_notice"> <p>Your request has been approved. Pick up your requested facility at the Barangay / You can now use the venue.</p></div><Container> <BoxUpload> <div className="image-upload">{!isUploaded ? (<> <label htmlFor="upload-input"> <img src={FolderIcon} draggable={"false"} alt="placeholder" style={{ width: 100, height: 100 }} /> <p style={{ color: "#444" }}> Click to upload image </p></label> <input id="upload-input" type="file" accept=".jpg,.jpeg,.gif,.png,.mov,.mp4" onChange={(e) => handleFileUpload(e)} /> </>) : (<ImagePreview>{facility_image != null ? (<img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(facility_image)}`} draggable={false} alt="uploaded-img" style={{ width: "250px", height: "250px" }} />) : (<img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(postImage)}`} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} />)}</ImagePreview>)}</div></BoxUpload> </Container> <div className="generate-certificate-body"> <div className="generate-certificate-container"> <div className="wrapper" id="wrapper_profile"> <div className="forms"> <div className="input_fields"> <label>Address</label> <textarea type="text" className="textarea" disabled defaultValue={address} /> </div><div className="input_fields"> <label>Contact</label> <input type="text" className="inputs" disabled defaultValue={contact} /> </div><div className="input_fields"> <label>Facility Name</label> <input type="text" className="inputs" disabled defaultValue={item} /> </div><div className="input_fields"> <label>Quantity</label> <input type="text" className="inputs" disabled defaultValue={quantity} /> </div><div className="input_fields"> <label>Purpose</label> <input type="text" className="inputs" disabled defaultValue={purpose} /> </div><div className="input_fields"> <label>Date Need</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_need} /></p></div><div className="input_fields"> <label>Date Requested</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_requested} /></p></div>{status === "Barrowed" ? <div className="input_fields"> <label>Date Borrowed</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_borrowed} /></p></div> : status === "Declined" ? <> <div className="input_fields"> <label>Date Declined</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_declined} /></p></div><div className="input_fields"> <label>Remarks</label> <textarea className="textarea" disabled defaultValue={remarks}></textarea> </div></> : status === "Returned" ? <> <div className="input_fields"> <label>Date Borrowed</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_borrowed} /></p></div><div className="input_fields"> <label>Date Returned</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_returned} /></p></div></> : ""}</div></div></div></div></PopUp>
            <TableContainer component={Paper} className={classes.tableContainer}> <Table className={classes.table} aria-label="simple table"> <TableHead > <TableRow className={classes.tableRow}> <TableCell className={classes.tableHeaderCell}>Facility</TableCell> <TableCell className={classes.tableHeaderCell}>Date Requested</TableCell> <TableCell className={classes.tableHeaderCell}>Status</TableCell> <TableCell className={classes.tableHeaderCell} id="mobile_hidden">Action</TableCell> </TableRow> </TableHead> <TableBody>{data.map((row) => { return (<TableRow>{row.status === "Borrowed" ? <> <TableCell className={classes.tableCell} onClick={() => openBorrowedPopup(row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name}>{row.facility_name}</Typography> </Grid> </Grid> </TableCell> <TableCell className={classes.tableCell} onClick={() => openBorrowedPopup(row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={row.date_requested} /></p></TableCell> <TableCell onClick={() => openBorrowedPopup(row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <Typography className={classes.status} style={{ backgroundColor: "green" }}>{row.status}</Typography> </TableCell> <TableCell id="mobile_hidden"> <button className="view_edit" onClick={() => openBorrowedPopup(row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}><FaEdit /></button> </TableCell> </> : row.status === "Declined" ? <> <TableCell className={classes.tableCell} onClick={() => openDeclinedPopup(row.date_declined, row.remarks, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.purpose, row.facility_name, row.facility_img)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name}>{row.facility_name}</Typography> </Grid> </Grid> </TableCell> <TableCell className={classes.tableCell} onClick={() => openDeclinedPopup(row.date_declined, row.remarks, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.purpose, row.facility_name, row.facility_img)}> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_requested} /></p></TableCell> <TableCell onClick={() => openDeclinedPopup(row.date_declined, row.remarks, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.purpose, row.facility_name, row.facility_img)}> <Typography className={classes.status} style={{ backgroundColor: "red" }}>{row.status}</Typography> </TableCell> <TableCell id="mobile_hidden" onClick={() => openDeclinedPopup(row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <button className="view_edit" onClick={() => openDeclinedPopup(row.date_declined, row.remarks, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.purpose, row.facility_name, row.facility_img)}><FaEdit /></button> </TableCell> </> : row.status === "Returned" ? <> <TableCell className={classes.tableCell} onClick={() => openReturnedPopup(row.date_returned, row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name}>{row.facility_name}</Typography> </Grid> </Grid> </TableCell> <TableCell className={classes.tableCell} onClick={() => openReturnedPopup(row.date_returned, row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={row.date_requested} /></p></TableCell> <TableCell onClick={() => openReturnedPopup(row.date_returned, row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <Typography className={classes.status} style={{ backgroundColor: "green" }}>{row.status}</Typography> </TableCell> <TableCell id="mobile_hidden"> <button className="view_edit" onClick={() => openReturnedPopup(row.date_returned, row.date_borrowed, row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}><FaEdit /></button> </TableCell> </> : <> <TableCell className={classes.tableCell} onClick={() => openPendingPopup(row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <Grid container> <Grid item lg={10}> <Typography className={classes.name}>{row.item}</Typography> </Grid> </Grid> </TableCell> <TableCell className={classes.tableCell} onClick={() => openPendingPopup(row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={row.date_requested} /></p></TableCell> <TableCell onClick={() => openPendingPopup(row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}> <Typography className={classes.status} style={{ backgroundColor: ((row.status === "Processed" && 'green') || (row.status === "Pending" && 'red')) }}>{row.status}</Typography> </TableCell> <TableCell id="mobile_hidden"> <button className="view_edit" onClick={() => openPendingPopup(row.req_facility_id, row.full_name, row.address, row.contact, row.date_need, row.item, row.quantity, row.date_requested, row.status, row.purpose, row.facility_name, row.facility_img)}><FaEdit /></button> </TableCell> </>}</TableRow>) })}</TableBody> <TableFooter> <TablePagination className={classes.tablePagination} rowsPerPageOptions={[5, 10, 15]} component="span" count={data.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} /> </TableFooter> </Table> </TableContainer>
        </div >
    )
}