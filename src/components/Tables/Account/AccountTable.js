import React, { useState } from 'react'
import { useHistory } from 'react-router-dom';
import Axios from 'axios';
import ViewEditDialog from '../../../../src/components/Dialog/ViewEditDialog'
import ConfirmDialog from '../../../../src/components/Dialog/ConfirmDialog'
import SuccessDialog from '../../../../src/components/Dialog/SuccessDialog';
import LoginAuthPop from '../../../../src/components/Dialog/LoginAuthPop'
import SuccessRegisterDialog from '../../../../src/components/Dialog/SuccessRegisterDialog';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Grid, Typography, TablePagination, TableFooter } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import PopUp from './../../../../src/components/Dialog/PopUp';
import { FaEye, FaArchive } from 'react-icons/fa';
import { Container, BoxUpload, ImagePreview } from "./../../../../src/components/Styled/ImageStyle";


const useStyles = makeStyles((theme) => ({ table: { minWidth: 200, }, tableContainer: { maxWidth: 1175, borderRadius: 0, }, tableHeaderCell: { fontWeight: 'bold', backgroundColor: '#0061a8', color: theme.palette.getContrastText(theme.palette.primary.dark), fontFamily: "Montserrat, sans-serif", cursor: "pointer", lineHeight: "1.43", paddingTop: "15px", paddingBottom: "15px", }, tableCell: { fontFamily: "Montserrat, sans-serif", cursor: "pointer", fontSize: "15px" }, avatar: { backgroundColor: theme.palette.primary.light, color: theme.palette.getContrastText(theme.palette.primary.light) }, name: { cursor: "pointer", fontWeight: 'bold', color: "#2e4a56", fontFamily: "Montserrat, sans-serif" }, residentIdTitle: { fontSize: "15px" }, pagination: { overflow: "hidden" } }))

export default function AccountTable({ data }) {
    Axios.defaults.withCredentials = true;
    const history = useHistory(), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successRegisterDialog, setSuccessRegisterDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), classes = useStyles(), [page, setPage] = useState(0), [rowsPerPage, setRowsPerPage] = useState(5), [openPopup, setOpenPopup] = useState(!1), [resident_id, setResidentId] = useState(""), [household_id, setHouseholdId] = useState(""), [first_name, setFirstName] = useState(""), [middle_name, setMiddleName] = useState(""), [last_name, setLastName] = useState(""), [suffix, setSuffix] = useState(""), [username, setUsername] = useState(""), [role, setRole] = useState(""), [image, setImage] = useState(""), refresh = () => { setSuccessDialog({ ...successDialog, isOpen: false }); history.push("/ta-registered-accounts") }, handleChangePage = (event, newPage) => { setPage(newPage); }, handleChangeRowsPerPage = (event) => { setRowsPerPage(event.target.value); setPage(0); }

    function openInPopup(resident_id, household_id, first_name, middle_name, last_name, suffix, username, role) { setOpenPopup(true); setResidentId(resident_id); setHouseholdId(household_id); setFirstName(first_name); setMiddleName(middle_name); setLastName(last_name); setSuffix(suffix); setUsername(username); setRole(role); }

    const archive_resident_confirm = (resident_id, user_id, username, password, role) => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.put("http://localhost:3001/ArchiveAccounts", { archive_userId: user_id, archive_username: username, archive_password: password, archive_role: role, archive_resident_id: resident_id, }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Something went wrong. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setSuccessRegisterDialog({ isOpen: true, title: "Archived Account", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button>, }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }); }

    function archive_resident(resident_id, user_id, username, password, role) { setConfirmDialog({ isOpen: true, title: "Archive Account", subtitle: "Are you sure you want to archive this account? This account will never have access to the system.", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => archive_resident_confirm(resident_id, user_id, username, password, role)} className="alert_yesBtn"> Yes </button> }) }

    return (
        <div>
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <PopUp title="View / Edit Official" openPopup={openPopup} setOpenPopup={setOpenPopup} maxWidth="ls"> <div className="resident_tbl_add_resident"> <div className="container"> <div className="row"> <div className="upper_profile"> <div className="MyProfile_img_container"> <Container> <BoxUpload> <div className="image-upload"> <ImagePreview> <img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(image)}`} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} /> </ImagePreview> </div></BoxUpload> </Container> </div><div className="MyProfile_fullname"> <h1 className="FN">{first_name + " " + middle_name + " " + last_name + " " + suffix}</h1> <span className="MyProfile_role"> <small className="R">{role}</small> </span> </div></div></div></div><div className="add_new_resident_container"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label> Last Name:</label> <input type="text" required className="inputs" autoComplete="off" disabled={"disabled"} defaultValue={last_name} /> </div><div className="input_fields"> <label > First Name:</label> <input type="text" className="inputs" autoComplete="off" required disabled={"disabled"} defaultValue={first_name} /> </div><div className="input_fields"> <label> Middle Name:</label> <input type="text" className="inputs" required autoComplete="off" disabled={"disabled"} defaultValue={middle_name} /> </div><div className="input_fields"> <label> Suffix:</label> <input type="text" className="inputs" autoComplete="off" disabled={"disabled"} defaultValue={suffix} /> </div><div className="input_fields"> <label> Username:</label> <input type="text" className="inputs" autoComplete="off" disabled={"disabled"} defaultValue={username} /> </div></div></div></div></div></PopUp>
            <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <SuccessRegisterDialog successRegisterDialog={successRegisterDialog} setSuccessRegisterDialog={setSuccessRegisterDialog} />
            <TableContainer component={Paper} className={classes.tableContainer}> <Grid item xs={12}> <Table className={classes.table} aria-label="simple table"> <TableHead> <TableRow className={classes.tableRow}> <TableCell className={classes.tableHeaderCell}>Full Name</TableCell> <TableCell className={classes.tableHeaderCell} id="resident_address" >Username</TableCell> <TableCell className={classes.tableHeaderCell} id="resident_address" >Role</TableCell> <TableCell className={classes.tableHeaderCell} id="resident_action" >Action</TableCell> </TableRow> </TableHead> <TableBody className={classes.tableBody}>{data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => { return (<TableRow> <TableCell onClick={() => openInPopup(row.resident_id, row.household_id, row.first_name, row.middle_name, row.last_name, row.suffix, row.username, row.role)} id="last_name"> <Typography className={classes.name}>{row.first_name + " " + row.middle_name + " " + row.last_name + " " + row.suffix}</Typography> </TableCell> <TableCell id="resident_address" onClick={() => openInPopup(row.resident_id, row.household_id, row.first_name, row.middle_name, row.last_name, row.suffix, row.username, row.role)} className={classes.tableCell}>{row.username}</TableCell> <TableCell id="resident_address" onClick={() => openInPopup(row.resident_id, row.household_id, row.first_name, row.middle_name, row.last_name, row.suffix, row.username, row.role)} className={classes.tableCell}>{row.role}</TableCell> <TableCell className={classes.tableCell} id="resident_action"><button className="view_edit" onClick={() => openInPopup(row.resident_id, row.household_id, row.first_name, row.middle_name, row.last_name, row.suffix, row.username, row.role)}><FaEye /></button> <button className="archive_button" onClick={() => archive_resident(row.resident_id, row.user_id, row.username, row.password, row.role)}><FaArchive /></button></TableCell> </TableRow>) })}</TableBody> <TableFooter> <TablePagination rowsPerPageOptions={[5, 10, 15]} count={data.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} className={classes.pagination} component={"span"} /> </TableFooter> </Table> </Grid> </TableContainer>
        </div>
    )
}