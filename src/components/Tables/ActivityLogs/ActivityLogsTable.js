/* eslint-disable no-lone-blocks */
import React, { useState } from "react";
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography, TablePagination, TableFooter, } from "@material-ui/core"
import { makeStyles } from "@material-ui/core/styles";
import Axios from "axios";
import Notification from "../../Dialog/Notification";
import ConfirmDialog from "../../Dialog/ConfirmDialog";
import ViewEditDialog from "../../Dialog/ViewEditDialog";
import SuccessDialog from "../../Dialog/SuccessDialog";
import LoginAuthPop from "../../Dialog/LoginAuthPop";
import SuccessRegisterDialog from "../../Dialog/SuccessRegisterDialog";
import PopUp from "../../Dialog/PopUp";
import Moment from 'react-moment';

const useStyles = makeStyles((theme) => ({ table: { minWidth: 200, }, tableContainer: { maxWidth: 1175, borderRadius: 0, border: "0.5px solid #d5dbd9", }, tableHeaderCell: { fontWeight: "bold", backgroundColor: "#0061a8", color: theme.palette.getContrastText(theme.palette.primary.dark), fontFamily: "Montserrat, sans-serif", cursor: "pointer", lineHeight: "1.43", paddingTop: "15px", paddingBottom: "15px", }, tableCell: { fontFamily: "Montserrat, sans-serif", cursor: "pointer", }, avatar: { backgroundColor: theme.palette.primary.light, color: theme.palette.getContrastText(theme.palette.primary.light), }, name: { cursor: "pointer", fontWeight: "bold", color: "#2e4a56", fontFamily: "Montserrat, sans-serif", }, residentIdTitle: { fontSize: "15px", }, status: { fontWeight: "bold", fontSize: "0.75rem", color: "white", backgroundColor: "grey", borderRadius: 5, padding: "3px 10px", display: "inline-block", fontFamily: "Montserrat, sans-serif", }, }))

function ActivityLogsTable({ data }) {
    Axios.defaults.withCredentials = true;
    const [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successRegisterDialog, setSuccessRegisterDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), classes = useStyles(), [username, setUsername] = useState(""), [first_name, setFirstName] = useState(""), [middle_name, setMiddleName] = useState(""), [last_name, setLastName] = useState(""), [suffix, setSuffix] = useState(""), [action, setAction] = useState(""), [action_type, setActionType] = useState(""), [date_performed, setDatePerformed] = useState(""), [time_performed, setTimePerformed] = useState(""), [role, setRole] = useState(""), [page, setPage] = useState(0), [rowsPerPage, setRowsPerPage] = useState(5), handleChangePage = (event, newPage) => { setPage(newPage); }, handleChangeRowsPerPage = (event) => { setRowsPerPage(+event.target.value); setPage(0); }, [openPopup, setOpenPopup] = useState(false), [click, setClick] = useState(false);
    function openInPopup(audit_username, audit_lastname, audit_firstname, audit_middlename, audit_suffix, audit_action, audit_action_type, audit_date_performed, audit_time_performed, audit_role) { setOpenPopup(true); setUsername(audit_username); setFirstName(audit_firstname); setMiddleName(audit_middlename); setLastName(audit_lastname); setSuffix(audit_suffix); setAction(audit_action); setActionType(audit_action_type); setDatePerformed(audit_date_performed); setTimePerformed(audit_time_performed); setRole(audit_role); if (!openPopup) { setClick(false); } }

    return (
        <div>
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} /> <SuccessRegisterDialog successRegisterDialog={successRegisterDialog} setSuccessRegisterDialog={setSuccessRegisterDialog} /> <Notification notify={notify} setNotify={setNotify} /> <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} /> <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} /> <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <PopUp title="View Information" openPopup={openPopup} setOpenPopup={setOpenPopup}> <div className="generate-certificate-body"> <div className="generate-certificate-container"> <div> <div className="wrapper" id="wrapper_profile"> <div className="generate_certificate_title"> <h1> Activity Logs </h1> </div><div className="forms"> <div className="input_fields"> <label>Role:</label> <input type="text" className="inputs" value={role} disabled /> </div><div className="input_fields"> <label>Username:</label> <input type="text" className="inputs" value={username} disabled /> </div><div className="input_fields"> <label>First Name:</label> <input type="text" className="inputs" value={first_name} disabled /> </div><div className="input_fields"> <label>Middle Name:</label> <input type="text" className="inputs" value={middle_name} disabled /> </div><div className="input_fields"> <label>Last Name:</label> <input type="text" className="inputs" value={last_name} disabled /> </div><div className="input_fields"> <label>Suffix:</label> <input type="text" className="inputs" value={suffix} disabled /> </div><div className="input_fields"> <label>Action:</label> <textarea className="textarea" value={action} disabled></textarea> </div><div className="input_fields"> <label>Type of Action:</label> <input type="text" className="inputs" value={action_type} disabled /> </div><div className="input_fields"> <label>Date Performed:</label> <p className="inputs"><Moment format={"MMMM DD, YYYY"} date={date_performed} /></p></div><div className="input_fields"> <label>Time Performed:</label> <input type="text" className="inputs" value={time_performed} disabled /> </div></div></div></div></div></div></PopUp>
            <TableContainer component={Paper} className={classes.tableContainer}> <Table className={classes.table} aria-label="simple table"> <TableHead > <TableRow className={classes.tableRow}> <TableCell className={classes.tableHeaderCell}>Username</TableCell> <TableCell className={classes.tableHeaderCell}>Action</TableCell> <TableCell className={classes.tableHeaderCell}>Type of Action</TableCell> <TableCell className={classes.tableHeaderCell}>Date Performed</TableCell> <TableCell className={classes.tableHeaderCell}>Time Performed</TableCell> <TableCell className={classes.tableHeaderCell}>Role</TableCell> </TableRow> </TableHead> <TableBody>{data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => { return (<TableRow> <TableCell onClick={() => openInPopup(row.username, row.last_name, row.first_name, row.middle_name, row.suffix, row.audit_action, row.audit_action_type, row.audit_date_performed, row.audit_time_performed, row.audit_role)} id="last_name"> <Typography className={classes.name}>{row.username}</Typography> </TableCell> <TableCell className={classes.tableCell} onClick={() => openInPopup(row.username, row.last_name, row.first_name, row.middle_name, row.suffix, row.audit_action, row.audit_action_type, row.audit_date_performed, row.audit_time_performed, row.audit_role)}> <Typography className={classes.name}>{row.audit_action}</Typography> </TableCell> <TableCell onClick={() => openInPopup(row.username, row.last_name, row.first_name, row.middle_name, row.suffix, row.audit_action, row.audit_action_type, row.audit_date_performed, row.audit_time_performed, row.audit_role)}> <Typography className={classes.name}>{row.audit_action_type}</Typography> </TableCell> <TableCell onClick={() => openInPopup(row.username, row.last_name, row.first_name, row.middle_name, row.suffix, row.audit_action, row.audit_action_type, row.audit_date_performed, row.audit_time_performed, row.audit_role)}> <Typography className={classes.name}><p><Moment format={"MMMM DD, YYYY"} date={row.audit_date_performed} /></p></Typography> </TableCell> <TableCell onClick={() => openInPopup(row.username, row.last_name, row.first_name, row.middle_name, row.suffix, row.audit_action, row.audit_action_type, row.audit_date_performed, row.audit_time_performed, row.audit_role)}> <Typography className={classes.name}>{row.audit_time_performed}</Typography> </TableCell> <TableCell onClick={() => openInPopup(row.username, row.last_name, row.first_name, row.middle_name, row.suffix, row.audit_action, row.audit_action_type, row.audit_date_performed, row.audit_time_performed, row.audit_role)}> <Typography className={classes.name}>{row.audit_role}</Typography> </TableCell> </TableRow>) })}</TableBody> <TableFooter> <TablePagination rowsPerPageOptions={[5, 10, 15]} count={data.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} component={"span"} /> </TableFooter> </Table> </TableContainer>
        </div>
    );
}
export default ActivityLogsTable;
