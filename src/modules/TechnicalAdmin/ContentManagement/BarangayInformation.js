import React, { useState, useEffect } from 'react';
import Axios from 'axios';
import Notification from './../../../components/Dialog/Notification';
import ConfirmDialog from './../../../components/Dialog/ConfirmDialog';
import SuccessDialog from './../../../components/Dialog/SuccessDialog';
import LoginAuthPop from './../../../components/Dialog/LoginAuthPop';
import { Container, BoxUpload, ImagePreview } from "./../../../components/Styled/ImageStyle";
import FolderIcon from "../../../../src/images/folder_icon_transparent.png";
import CloseIcon from "../../../../src/svg/CloseIcon.svg";
import TechnicalNavbar from '../../../components/Navbar/TechnicalAdmin/TechnicalNavbar';
import TechnicalSidebar from '../../../components/Sidebar/TechnicalAdmin/TechnicalSidebar';
import edit_icon from '../../../assets/icons/edit_icon.png'
import './BarangayInformation.css'
import back_icon from '../../../assets/icons/back_icon.png'
import loading from '../../../assets/icons/loading.png'
const BarangayInformation = () => {
    const [barangayInfo, setBarangayInfo] = useState([]), [contact, setContact] = useState(""), [email, setEmail] = useState(""), [region, setRegion] = useState(""), [province, setProvince] = useState(""), [city, setCity] = useState(""), [city_district, setCityDistrict] = useState(""), [barangay, setBarangay] = useState(""), [street, setStreet] = useState(""), [buildNo, setBuildNo] = useState(""), [postal, setPostal] = useState(""), [facebook, setFacebook] = useState(""), [twitter, setTwitter] = useState(""), [postImage, setPostImage] = useState(""), [erase, setErase] = useState(!1), [brgy_zone, setZone] = useState(""), [brgy_district, setBrgyDistrict] = useState(""), [brgy_ig, setBrgyIg] = useState(""), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccesDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [isLoading, setIsLoading] = useState(!1), [click, setClick] = useState(!1), back = () => { setClick(!1) }, [isUploaded, setIsUploaded] = useState(!0), edit_official = () => { setClick(!0); barangayInfo.map(t => insertData(t.brgy_region, t.brgy_province, t.brgy_city, t.brgy_cityDistrict, t.brgy_barangay, t.brgy_street, t.brgy_buildingNo, t.brgy_postal, t.brgy_contactNo, t.brgy_email, t.brgy_facebook, t.brgy_twitter, t.brgy_image, t.brgy_zone, t.brgy_district, t.brgy_ig)) }, refresh = () => { setSuccesDialog({ ...successDialog, isOpen: !1 }); window.location.reload() }, [sideBarOpen, setSidebarOpen] = useState(!1), openSidebar = () => { setSidebarOpen(!0) }, closeSidebar = () => { setSidebarOpen(!1) }, [edit_img, setEditImg] = useState(!1)
    useEffect(() => { async function fetchLoading() { setIsLoading(true); await Axios.get("http://localhost:3001/GetBarangayInformation").then((response) => { setBarangayInfo(response.data); setIsLoading(false) }); return () => { }; } fetchLoading() }, []);
    const save_changes_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.put("http://localhost:3001/UpdateBarangayInformation", { update_region: region, update_province: province, update_city: city, update_city_district: city_district, update_barangay: barangay, update_street: street, update_buildNo: buildNo, update_postal: postal, update_contact: contact, update_email: email, update_facebook: facebook, update_twitter: twitter, update_zone: brgy_zone, update_brgyDist: brgy_district, update_ig: brgy_ig }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Something went wrong in updating the Barangay Information. Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setSuccesDialog({ isOpen: true, title: "Updated Success!", subtitle: "Official Information updated successfully.", noButton: (<button onClick={() => refresh()} className="alert_backBtn"> Back </button>), }); } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Something went wrong. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }); }
    const save_changes = () => { const email_format = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; const contact_format = /^(09|\+639)\d{9}$/; const numberOnly_format = /^\d+$/; if (!postImage) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Image must not be empty.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!contact || !region || !province || !city || !city_district || !barangay || !street || !postal || !email || !brgy_district || !brgy_ig || !brgy_zone) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Required fields must not be empty. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!email_format.test(String(email).toLowerCase())) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Incorrect E-mail format. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!contact_format.test(String(contact))) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Incorrect Contact Number format. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!numberOnly_format.test(String(postal))) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Incorrect value for Postal. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: 'Are you sure you want to update barangay information ?', subtitle: 'Please check all the information before updating.', noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn"> Back </button>, yesButton: <button onClick={save_changes_confirm} className="alert_yesBtn"> Yes </button>, }) } }
    function insertData(region, province, city, cityDistrict, barangay, street, buildingNo, postal, contact, email, facebook, twitter, image, brgy_zone, brgy_district, brgy_ig) { setRegion(region); setProvince(province); setCity(city); setCityDistrict(cityDistrict); setBarangay(barangay); setStreet(street); setBuildNo(buildingNo); setPostal(postal); setContact(contact); setEmail(email); setFacebook(facebook); setTwitter(twitter); setPostImage(image); setBrgyDistrict(brgy_district); setZone(brgy_zone); setBrgyIg(brgy_ig); }
    const convertToBase64 = (file) => { return new Promise((resolve, reject) => { const fileReader = new FileReader(); fileReader.readAsDataURL(file); fileReader.onload = () => { const base64String = fileReader.result.replace("data:", "").replace(/^.+,/, ""); resolve(base64String); }; fileReader.onerror = (error) => { reject(error); }; }); }, handleFileUpload = async (e) => { if (!isUploaded) { const fsize = e.target.files[0].size; const file = Math.round(fsize / 1000); if (file >= 50000) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "File too Big, please select a file less than 80kb", noButton: (<button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn" > Back </button>), }); } else if (file < 20) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "File too small, please select a file greater than 200kb.", noButton: (<button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn" > Back </button>), }); } else { const file = e.target.files[0]; const base64 = await convertToBase64(file); setPostImage(base64); if (e.target.files && e.target.files[0]) { let reader = new FileReader(); reader.onload = function (e) { setIsUploaded(true); }; reader.readAsDataURL(e.target.files[0]); } } } };
    const update_brgyimg_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.put("http://localhost:3001/UpdateBrgyLogo", { update_image: postImage, }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Something went wrong. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setSuccesDialog({ isOpen: true, title: "Update Barangay Logo", subtitle: response.data.success, noButton: (<button onClick={() => refresh()} className="alert_backBtn"> Back </button>), }); } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Connection error. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }); }
    const update_brgyimg = () => { setConfirmDialog({ isOpen: true, title: 'Update Brgy Logo', subtitle: 'Are you sure you want to update Barangay Logo?', noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn"> Back </button>, yesButton: <button onClick={update_brgyimg_confirm} className="alert_yesBtn"> Yes </button>, }) }
    return (
        <div className="adminHome_container">
            <TechnicalNavbar sidebarOpen={sideBarOpen} openSidebar={openSidebar} />
            <TechnicalSidebar sidebarOpen={sideBarOpen} closeSidebar={closeSidebar} />
            <main>
                <Notification notify={notify} setNotify={setNotify} />
                <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
                <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
                <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccesDialog} />
                {barangayInfo.map((row) => (<div className="wrapper"> <div className="adminhome_titles"> <h1>Manage Barangay information</h1> <hr /> </div><div className="loading_container">{isLoading && <img src={loading} alt={loading} className="loading_icon" />}</div><div className="brgy_information"> <Container> <BoxUpload> <div className="image-upload">{!isUploaded ? (<> <img className="cancel" src={back_icon} alt="CloseIcon" onClick={() => { setEditImg(false); setIsUploaded(true); setErase(false); }} /> <label htmlFor="upload-input"> <img src={FolderIcon} draggable={"false"} alt="placeholder" style={{ width: 100, height: 100 }} /> <p style={{ color: "#444" }}> Click to upload logo </p></label> <input disabled={edit_img ? "" : "disabled"} id="upload-input" type="file" accept=".jpg,.jpeg,.png," onChange={(e) => handleFileUpload(e)} /> </>) : (<ImagePreview>{edit_img ? <img className="close-icon" src={CloseIcon} alt="CloseIcon" onClick={() => { setIsUploaded(false); setErase(true); }} /> : <img className="edit_icon" src={edit_icon} alt="CloseIcon" onClick={() => { setEditImg(true) }} />}{!erase && row.brgy_image != null ? (<img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(row.brgy_image)}`} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} />) : (<img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(postImage)}`} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} />)}</ImagePreview>)}</div></BoxUpload> </Container>{isUploaded && edit_img ? <center> <button onClick={update_brgyimg}>Save Changes</button> </center> : ""}</div><br /> <br /> <div className="forms">{click ? <> <div className="input_fields"> <label>Region: <span className="required_symbol">*</span></label> <div className="custom_select"> <select className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={region} onChange={(e) => { setRegion(e.target.value); }}> <option value="">Select</option> <option value="National Capital Region">NCR - National Capital Region</option> <option value="Cordillera Administrative Region">CAR - Cordillera Administrative Region</option> </select> </div></div><div className="input_fields" > <label>Province: <span className="required_symbol">*</span></label> <div className="custom_select"> <select className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={province} onChange={(e) => { setProvince(e.target.value); }}> <option value="">Select</option> <option value="NCR, First District">NCR, First District</option> <option value="NCR, Second District">NCR, Second District</option> <option value="NCR, Third District">NCR, Third District</option> <option value="NCR, Fourth District">NCR, Fourth District</option> </select> </div></div><div className="input_fields" > <label>City: <span className="required_symbol">*</span></label> <div className="custom_select"> <select className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={city} onChange={(e) => { setCity(e.target.value); }}> <option value="">Select</option> <option value="City Of Manila">City Of Manila</option> </select> </div></div><div className="input_fields"> <label>City District: <span className="required_symbol">*</span></label> <div className="custom_select"> <select className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={city_district} onChange={(e) => { setCityDistrict(e.target.value); }}> <option value="">Select</option> <option value="Sampaloc">Sampaloc</option> </select> </div></div><div className="input_fields" > <label>Barangay: <span className="required_symbol">*</span></label> <div className="custom_select"> <select className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={barangay} onChange={(e) => { setBarangay(e.target.value); }}> <option value="">Select</option> <option value="Barangay 407">Barangay 407</option> <option value="Barangay 412">Barangay 412</option> </select> </div></div><div className="input_fields"> <label>Zone: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={brgy_zone} onChange={(e) => setZone(e.target.value)} /> </div><div className="input_fields"> <label>District: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={brgy_district} onChange={(e) => setBrgyDistrict(e.target.value)} /> </div><div className="input_fields"> <label>Street: <span className="required_symbol">*</span></label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={street} onChange={(e) => setStreet(e.target.value)} /> </div><div className="input_fields"> <label>Building No.: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={buildNo} onChange={(e) => setBuildNo(e.target.value)} /> </div><div className="input_fields"> <label>Postal:{click ? <span className="text-danger">*</span> : ""}</label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={postal} onChange={(e) => setPostal(e.target.value)} /> </div><div className="input_fields"> <label>Contact No.:{click ? <span className="text-danger">*</span> : ""}</label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={contact} onChange={(e) => setContact(e.target.value)} /> </div><div className="input_fields"> <label>E-mail Account:{click ? <span className="text-danger">*</span> : ""}</label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={email} onChange={(e) => setEmail(e.target.value)} /> </div><div className="input_fields"> <label>Facebook Page: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={facebook} onChange={(e) => setFacebook(e.target.value)} /> </div><div className="input_fields"> <label>Twitter Account: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={twitter} onChange={(e) => setTwitter(e.target.value)} /> </div><div className="input_fields"> <label>Instagram Account: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={brgy_ig} onChange={(e) => setBrgyIg(e.target.value)} /> </div></> : <> <div className="input_fields"> <label>Region: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_region} /> </div><div className="input_fields"> <label>Province: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_province} /> </div><div className="input_fields"> <label>City: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_city} /> </div><div className="input_fields"> <label>City District: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_cityDistrict} /> </div><div className="input_fields"> <label>Barangay: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_barangay} /> </div><div className="input_fields"> <label>Zone: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_zone} /> </div><div className="input_fields"> <label>District: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_district} /> </div><div className="input_fields"> <label>Street: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_street} /> </div><div className="input_fields"> <label>Building No.: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_buildingNo} /> </div><div className="input_fields"> <label>Postal:{click ? <span className="text-danger">*</span> : ""}</label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_postal} /> </div><div className="input_fields"> <label>Contact No.:{click ? <span className="text-danger">*</span> : ""}</label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_contactNo} /> </div><div className="input_fields"> <label>E-mail Account:{click ? <span className="text-danger">*</span> : ""}</label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_email} /> </div><div className="input_fields"> <label>Facebook Page: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_facebook} /> </div><div className="input_fields"> <label>Twitter Account: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_twitter} /> </div><div className="input_fields"> <label>Instagram Account: </label> <input type="text" className="inputs" autoComplete="off" disabled={click ? "" : "disabled"} defaultValue={row.brgy_ig} /> </div></>}<div className="add_resident_container_footer"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile">{click ? <> <div className="input_fields"> <input type="submit" className="btn" value="Save Changes" onClick={save_changes} /> </div><div className="input_fields"> <input type="submit" className="btn" value="Back" onClick={back} /> </div></> : <div className="input_fields"> <input type="submit" value="Edit" className="btn" onClick={edit_official} /> </div>}</div></div></div></div></div>))}
            </main>
        </div>
    )
}
export default BarangayInformation