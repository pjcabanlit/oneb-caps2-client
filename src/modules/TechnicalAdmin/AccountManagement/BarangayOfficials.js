import React, { useState, useEffect, useRef } from 'react'
import Axios from 'axios';
import './../../../../src/styles/Common.css';
import { BrowserRouter as Router, Switch, Route, Link, Redirect, useRouteMatch, useHistory } from 'react-router-dom'
import OfficialList from './Official/OfficialList';
import ArchiveList from './Official/ArchiveList';
import TechnicalNavbar from '../../../components/Navbar/TechnicalAdmin/TechnicalNavbar';
import TechnicalSidebar from '../../../components/Sidebar/TechnicalAdmin/TechnicalSidebar';
import LoginAuthPop from '../../../components/Dialog/LoginAuthPop'
import ViewEditDialog from '../../../components/Dialog/ViewEditDialog'
import SuccessDialog from '../../../components/Dialog/SuccessDialog'
import ConfirmDialog from '../../../components/Dialog/ConfirmDialog'
import { Container, BoxUpload, ImagePreview } from "../../../components/Styled/ImageStyle";
import FolderIcon from "../../../images/folder_icon_transparent.png";
import CloseIcon from "../../../svg/CloseIcon.svg";
import PopUp from '../../../components/Dialog/PopUp'
import { IoIosAdd } from 'react-icons/io';
import moment from 'moment'
export default function BarangayOfficials() {
    let { url } = useRouteMatch();
    Axios.defaults.withCredentials = true;
    const history = useHistory(), [id, setId] = useState(0), [active, setActive] = useState([{ id: 0, buttonName: "Official List", isActive: !0, path: `${url}/officials-list` }, { id: 1, buttonName: "Archive List", isActive: !1, path: `${url}/archive-list` }]), toggleActive = e => { setActive(active.map((t, s) => s === e ? { ...t, isActive: !0 } : { ...t, isActive: !1 })); setId(e) }, [sideBarOpen, setSidebarOpen] = useState(!1), [viewEditDialog, setViewEditDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccesDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [openPopup, setOpenPopup] = useState(!1), [first_name, setFirstName] = useState(""), [middle_name, setMiddleName] = useState(""), [last_name, setLastName] = useState(""), [suffix, setSuffix] = useState(""), [position, setPosition] = useState(""), [termFrom, setTermFrom] = useState(""), [termTo, setTermTo] = useState(""), [residentFullNameList, setResidentFullNameList] = useState([]), [residentID, setResidentID] = useState(""), [password, setPassword] = useState(""), [confirm_password, setConfirmPassword] = useState(""), initialFirstName = first_name.slice(0, 1).toLocaleLowerCase(), initialMiddleName = middle_name.slice(0, 1).toLocaleLowerCase(), suggestUsername = `${last_name.toLocaleLowerCase() + initialFirstName + initialMiddleName}`, openInPopup = () => { setOpenPopup(!0) }, refresh = () => { setSuccesDialog({ ...successDialog, isOpen: !1 }); history.push("/ta-register-brgyofficials") }, openSidebar = () => { setSidebarOpen(!0) }, closeSidebar = () => { setSidebarOpen(!1) }, [image, setImage] = useState(""), [isUploaded, setIsUploaded] = useState(false), [, setTypeFile] = useState(""), [display, setDisplay] = useState(false), [s, setSearch] = useState(""), wrapperRef = useRef(null);
    useEffect(() => { Axios.get("http://localhost:3001/GetResidentFullName").then((response) => { setResidentFullNameList(response.data); }) }, [])
    const add_official_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.post("http://localhost:3001/AddBarangayOfficial", { abo_residentID: residentID, abo_position: position, abo_termFrom: termFrom, abo_termTo: termTo, abo_image: image, abo_username: suggestUsername, abo_password: password, }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.err2) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err2, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.err3) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err3, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.err4) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err4, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.err5) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err5, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.err6) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err6, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.err9) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err9, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.userError) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.userError, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.err7) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err7, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.err8) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.err8, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else if (response.data.successful) { setOpenPopup(false); setSuccesDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.successful, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else if (response.data.positionError) { setErrorDialog({ isOpen: true, title: "Add Barangay Official", subtitle: response.data.positionError, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } else { setErrorDialog({ isOpen: true, title: "Connection Error.", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button>, }); } }) }
    const add_official = () => { const stringOnly_format = /^[a-zA-Z\s]*$/; const pswrdValidation = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/; if (!image) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Image must not be empty.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!s || !suggestUsername || !password || !termFrom || !termTo) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Required fields must not be empty.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (password !== confirm_password) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Password doesn't match. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!pswrdValidation.test(String(password))) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Password minimum of 8 characters, must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!stringOnly_format.test(String(first_name).toLowerCase()) || !stringOnly_format.test(String(middle_name).toLowerCase()) || !stringOnly_format.test(String(last_name).toLowerCase()) || !stringOnly_format.test(String(suffix).toLowerCase())) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Name should contain letters only.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (residentFullNameList.includes(s) || !residentID) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Name is not exist in resident information.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: 'Are you sure you want to Add this Official?', subtitle: 'Please check all the information before adding an Official.', noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn"> No </button>, yesButton: <button onClick={add_official_confirm} className="alert_yesBtn"> Yes </button>, }) } }
    const convertToBase64 = (file) => { return new Promise((resolve, reject) => { const fileReader = new FileReader(); fileReader.readAsDataURL(file); fileReader.onload = () => { const base64String = fileReader.result.replace("data:", "").replace(/^.+,/, ""); resolve(base64String); }; fileReader.onerror = (error) => { reject(error); }; }); };
    const handleImageChange = async (e) => { if (!isUploaded) { const fsize = e.target.files[0].size; const file = Math.round(fsize / 1000); if (file >= 50000) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "File too Big, please select a file less than 80kb", noButton: (<button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn" > Back </button>), }); } else if (file < 1) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "File too small, please select a file greater than 1kb.", noButton: (<button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn" > Back </button>), }); } else { const file = e.target.files[0]; const base64 = await convertToBase64(file); setImage(base64); if (e.target.files && e.target.files[0]) { setTypeFile(e.target.files[0].type); let reader = new FileReader(); reader.onload = function (e) { setIsUploaded(true); }; reader.readAsDataURL(e.target.files[0]); } } } else { setImage(e.target.value); } };
    const updatePokeDex = (full_name, resident_id, first_name, last_name, middle_name, suffix) => { setSearch(full_name); setResidentID(resident_id); setFirstName(first_name); setLastName(last_name); setMiddleName(middle_name); setSuffix(suffix); setDisplay(false); };
    return (
        <div className="adminHome_container">
            <TechnicalNavbar sidebarOpen={sideBarOpen} openSidebar={openSidebar} />
            <TechnicalSidebar sidebarOpen={sideBarOpen} closeSidebar={closeSidebar} />
            <main>
                <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
                <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
                <ViewEditDialog viewEditDialog={viewEditDialog} setViewEditDialog={setViewEditDialog} />
                <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccesDialog} />
                <PopUp title="Add New Official" openPopup={openPopup} setOpenPopup={setOpenPopup} maxWidth="ls"> <div className="MyProfile_img_container" style={{ marginBottom: "20px" }}> <Container> <BoxUpload> <div className="image-upload">{!isUploaded ? (<> <label htmlFor="upload-input"> <img src={FolderIcon} draggable={"false"} alt="placeholder" style={{ width: 100, height: 100 }} /> <p style={{ color: "#444" }}> Click to upload image </p></label> <input id="upload-input" type="file" accept=".jpg,.jpeg,.png" onChange={(e) => handleImageChange(e)} /> </>) : (<ImagePreview> <img className="close-icon" src={CloseIcon} alt="CloseIcon" onClick={() => { setIsUploaded(false); setImage(null); }} /> <img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(image)}`} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} /> </ImagePreview>)}</div></BoxUpload> </Container> </div><div className="add_new_resident_container" > <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Position<span className="required_symbol">*</span></label> <div className="custom_select"> <select className="inputs" autoComplete="off" onChange={(e) => { setPosition(e.target.value); }}> <option value="">Select</option> <option value="Punong Barangay">Punong Barangay</option> <option value="Secretary">Secretary</option> <option value="Treasurer">Treasurer</option> <option value="Kagawad">Kagawad</option> <option value="SK Chairman">SK Chairman</option> </select> </div></div><div className="input_fields"> <label>Term From:<span className="text-danger">*</span></label> <input type="date" className="inputs" min={moment().format("YYYY-MM-DD")} autoComplete="off" onChange={(e) => setTermFrom(e.target.value)} /> </div><div className="input_fields"> <label>Term To:<span className="text-danger">*</span></label> <input type="date" className="inputs" min={moment().format("YYYY-MM-DD")} autoComplete="off" onChange={(e) => setTermTo(e.target.value)} /> </div><div ref={wrapperRef} className="input_fields" id="input_field_hh"> <div className="search_auto"> <div className="input_fields"> <label>Full Name<span className="required_symbol">*</span></label> <input id="auto" onClick={() => setDisplay(!display)} placeholder="Type to search" value={s} onChange={event => setSearch(event.target.value)} autoComplete="off" className="inputs" /> </div>{display && (<div className="autoContainer">{residentFullNameList.filter((row) => row.full_name.toLowerCase().indexOf(s.toLowerCase()) > -1).map((value, i) => { return (<div className="hh2"> <div onClick={() => updatePokeDex(value.full_name, value.resident_id, value.first_name, value.last_name, value.middle_name, value.suffix)} className="option" key={i} tabIndex="0" > <span className="last_name_hh">{value.full_name}</span> </div></div>); })}</div>)}<h1>Account Information</h1> <div className="input_fields"> <label> Username<span className="required_symbol">*</span> </label> <input type="text" className="inputs" disabled="disabled" autoComplete="off" value={suggestUsername} /> </div><div className="input_fields"> <label> Password<span className="required_symbol">*</span> </label> <input type="password" className="inputs" autoComplete="off" onChange={(e) => setPassword(e.target.value)} /> </div><div className="input_fields" > <label> Confirm Password<span className="required_symbol">*</span> </label> <input type="password" className="inputs" autoComplete="off" onChange={(e) => setConfirmPassword(e.target.value)} /> </div></div></div></div></div></div><div className="add_resident_container_footer"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Submit" className="btn" onClick={add_official} /> </div></div></div></div></PopUp>
                <Router> <div className='technical_accounts'> <div className="certificate_request"> <div className="process_request_container"> <div className="adminhome_titles"> <h1>Manage Barangay Officials</h1> <hr /> </div><div className="folder"> <div className="folder_buttons">{active.map((button, index) => (<Link to={button.path} key={index} onClick={() => toggleActive(button.id)} className={`custom${button.isActive ? " active" : ""}`}>{button.buttonName}</Link>))}<div className={`underline${id === 0 ? "active-0" : ""}${id === 1 ? " active-1" : ""}`} /> </div><div className="new_resident_btn_container"> <button className="new_resident_btn" onClick={openInPopup}> <IoIosAdd className="btn_icon" />New Official</button> </div><Switch> <Route path="/ta-register-brgyofficials/officials-list" component={OfficialList} /> <Route path="/ta-register-brgyofficials/archive-list" component={ArchiveList} /> <Redirect to="/ta-register-brgyofficials/officials-list"></Redirect> </Switch> </div></div></div></div></Router>
            </main>
        </div>
    )
}