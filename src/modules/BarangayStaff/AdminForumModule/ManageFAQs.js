import React, { useState, useEffect } from 'react'
import axios from 'axios'
import FAQsTable from '../../../components/Tables/ManageFAQs/FAQsTable'
import { IoIosAdd } from 'react-icons/io'
import PopUp from '../../../components/Dialog/PopUp';
import ConfirmDialog from '../../../components/Dialog/ConfirmDialog';
import SuccessDialog from '../../../components/Dialog/SuccessDialog';
import LoginAuthPop from '../../../components/Dialog/LoginAuthPop';
import AdminNavbar from '../AdminHome/AdminNavbar';
import AdminSidebar from '../AdminHome/AdminSidebar';
import loading from '../../../assets/icons/loading.png'
const ManageFAQs = () => {
    const [faqs, setFaqs] = useState([]), [question, setQuestion] = useState(""), [answer, setAnswer] = useState(""), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [isLoading, setIsLoading] = useState(!1), [openPopup, setOpenPopup] = useState(!1), openInPopup = (e, t, s, o) => { setOpenPopup(!0) }, refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1 }); window.location.reload() }, [sideBarOpen, setSidebarOpen] = useState(!1), openSidebar = () => { setSidebarOpen(!0) }, closeSidebar = () => { setSidebarOpen(!1) };
    var showdate = new Date(), displaytodaysdate = showdate.getFullYear() + '-' + (showdate.getMonth() + 1) + '-' + showdate.getDate();
    useEffect(() => { async function fetchLoading() { setIsLoading(true); await axios.get("http://localhost:3001/GetFaqs").then((response) => { setFaqs(response.data); setIsLoading(false); }); return () => { }; } fetchLoading() }, []);
    const add_faq_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); axios.post("http://localhost:3001/AddFaq", { faq_question: question, faq_answer: answer, faq_dateToday: displaytodaysdate }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setOpenPopup(false); setSuccessDialog({ isOpen: true, title: "Add FAQ", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const add_faq = () => { if (!question || !answer) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "All fields are required.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: 'Are you sure you want to Add this FAQ?', subtitle: 'Please double check all the information before adding an FAQ.', noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn"> No </button>, yesButton: <button onClick={add_faq_confirm} className="alert_yesBtn"> Yes </button>, }) } }
    return (
        <div className="adminHome_container">
            <AdminNavbar sidebarOpen={sideBarOpen} openSidebar={openSidebar} />
            <AdminSidebar sidebarOpen={sideBarOpen} closeSidebar={closeSidebar} />
            <main> <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} /> <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} /> <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} /> <PopUp title="Add FAQ" openPopup={openPopup} setOpenPopup={setOpenPopup}> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Question:<span className="text-danger">*</span></label> <textarea type="text" className="textarea" style={{ height: "13rem" }} autoComplete="off" required onChange={(e) => setQuestion(e.target.value)} /> </div><div className="input_fields"> <label>Answer:<span className="text-danger">*</span></label> <textarea type="text" className="textarea" required style={{ height: "13rem" }} autoComplete="off" onChange={(e) => setAnswer(e.target.value)} /> </div></div></div><div className="add_resident_container_footer"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Submit" className="btn" onClick={add_faq} /> </div></div></div></div></PopUp> <div className="manage_faqs"> <div className="certificate_request"> <div className="process_request_container"> <div className="adminhome_titles"> <h1>Manage Frequently Asked Questions (Faqs)</h1> <hr /> </div><div className="resident_information_tbl"> <div className="loading_container">{isLoading && <img src={loading} alt={loading} className="loading_icon" />}</div><div className="resident_tbl_header"> <div className="search_resident"> </div><div className="resident_tbl_header"> <div className="new_resident_btn_container"> <button className="new_resident_btn" onClick={openInPopup}> <IoIosAdd className="btn_icon" />New FAQ</button> </div></div></div><center> <FAQsTable data={faqs} /> </center> </div></div></div></div></main>
        </div>
    )
}
export default ManageFAQs