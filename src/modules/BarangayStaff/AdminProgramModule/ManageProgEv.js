import React, { useState } from 'react'
import { IoIosAdd } from 'react-icons/io';
import moment from 'moment';
import { BrowserRouter as Router, Switch, Route, Link, Redirect, useRouteMatch, useHistory } from 'react-router-dom'
import Axios from 'axios';
import Notification from "../../../components/Dialog/Notification";
import ConfirmDialog from '../../../components/Dialog/ConfirmDialog';
import LoginAuthPop from '../../../components/Dialog/LoginAuthPop';
import PopUp from '../../../components/Dialog/PopUp'
import '../../../styles/Common.css';
import CancelledProgEv from './ProgramsEvents/CancelledProgEv'
import UpcomingProgEv from './ProgramsEvents/UpcomingProgEv'
import CompletedProgEv from './ProgramsEvents/CompletedProgEv';
import { Container, BoxUpload, ImagePreview } from "../../../components/Styled/ImageStyle";
import FolderIcon from "../../../images/folder_icon_transparent.png";
import CloseIcon from "../../../svg/CloseIcon.svg";
import SuccessDialog from '../../../components/Dialog/SuccessDialog';
import Announcement from './ProgramsEvents/Announcement';
import Decline from './../../../components/Dialog/Decline'
import AdminSidebar from '../AdminHome/AdminSidebar';
import AdminNavbar from '../AdminHome/AdminNavbar';
require("es6-promise").polyfill();
require("isomorphic-fetch");
export default function ManageProgEv() {
    Axios.defaults.withCredentials = true;
    let { url } = useRouteMatch();
    const history = useHistory(), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [openPopup, setOpenPopup] = useState(!1), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [program_title, setProgramTitle] = useState(""), [program_desc, setProgramDesc] = useState(""), [program_date, setProgramDate] = useState(""), [program_time, setProgramTime] = useState(""), [program_endDate, setProgramEndDate] = useState(""), [program_loc, setProgramLoc] = useState(""), [image, setImage] = useState(""), [isUploaded, setIsUploaded] = useState(!1), [typeFile, setTypeFile] = useState(""), [postImage, setPostImage] = useState(""), [ann_title, setAnnTitle] = useState(""), [ann_desc, setAnnDesc] = useState(""), [decline, setDecline] = useState(!1), [id, setId] = useState(0), [sideBarOpen, setSidebarOpen] = useState(!1), openSidebar = () => { setSidebarOpen(!0) }, closeSidebar = () => { setSidebarOpen(!1) }, [active, setActive] = useState([{ id: 0, buttonName: "Upcoming Programs", isActive: !0, path: `${url}/upcoming` }, { id: 1, buttonName: "Completed Programs", isActive: !1, path: `${url}/completed` }, { id: 2, buttonName: "Cancelled Programs", isActive: !1, path: `${url}/cancelled` }, { id: 3, buttonName: "Announcements", isActive: !1, path: `${url}/announcement` }]), toggleActive = e => { setActive(active.map((t, s) => s === e ? { ...t, isActive: !0 } : { ...t, isActive: !1 })); setId(e) }, openInPopup = () => { setOpenPopup(!0) }, openAnnouncement = () => { setDecline(!0) }, refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1 }); history.push("/manage-programs-events") };
    var showdate = new Date(), displaytodaysdate = showdate.getFullYear() + '-' + (showdate.getMonth() + 1) + '-' + showdate.getDate();
    const add_progev_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.post("http://localhost:3001/AddProgramEvent", { prog_title: program_title, prog_desc: program_desc, prog_sDate: program_date, prog_loc: program_loc, prog_time: !program_time ? null : program_time, prog_eDate: !program_endDate ? null : program_endDate, prog_image: postImage, prog_dateToday: displaytodaysdate, }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setDecline(false); setSuccessDialog({ isOpen: true, title: "Add Program/Event", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const add_progev = () => { if (!program_title || !program_desc || !program_date) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Required fields must not be empty.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to add this Program/Event?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => add_progev_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    const convertToBase64 = (file) => { return new Promise((resolve, reject) => { const fileReader = new FileReader(); fileReader.readAsDataURL(file); fileReader.onload = () => { const base64String = fileReader.result.replace("data:", "").replace(/^.+,/, ""); resolve(base64String); }; fileReader.onerror = (error) => { reject(error); }; }); };
    const handleFileUpload = async (e) => { if (!isUploaded) { const fsize = e.target.files[0].size; const file = Math.round(fsize / 1000); if (file >= 50000) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "File too Big, please select a file less than 50MB", noButton: (<button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn" > Back </button>), }); } else { const file = e.target.files[0]; const base64 = await convertToBase64(file); setPostImage(base64); if (e.target.files && e.target.files[0]) { setTypeFile(e.target.files[0].type); let reader = new FileReader(); reader.onload = function (e) { setImage(e.target.result); setIsUploaded(true); }; reader.readAsDataURL(e.target.files[0]); } } } else { setImage(e.target.value); } };
    const add_announcement_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.post("http://localhost:3001/AddAnnouncement", { ann_title: ann_title, ann_desc: ann_desc, ann_image: postImage, ann_date: displaytodaysdate, }).then((response) => { if (response.data.err) { setErrorDialog({ isOpen: true, title: response.data.err, subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.success) { setOpenPopup(false); setSuccessDialog({ isOpen: true, title: "Add Announcement", subtitle: response.data.success, noButton: <button onClick={() => refresh()} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Connection Error", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const add_announcement = () => { if (!ann_title || !ann_desc) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "All fields are required.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Confirmation", subtitle: "Are you sure you want to add this Announcement?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => add_announcement_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    return (
        <div className="adminHome_container">
            <AdminNavbar sidebarOpen={sideBarOpen} openSidebar={openSidebar} />
            <AdminSidebar sidebarOpen={sideBarOpen} closeSidebar={closeSidebar} />
            <main> <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} /> <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} /> <Notification notify={notify} setNotify={setNotify} /> <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} /> <Decline title="New Announcement" openPopup={decline} setOpenPopup={setDecline}> <Container> <BoxUpload> <div className="image-upload">{!isUploaded ? (<> <label htmlFor="upload-input"> <img src={FolderIcon} draggable={"false"} alt="placeholder" style={{ width: 100, height: 100 }} /> <p style={{ color: "#444" }}> Click to upload image </p></label> <input id="upload-input" type="file" accept=".jpg,.jpeg,.gif,.png,.mov,.mp4" onChange={(e) => handleFileUpload(e)} /> </>) : (<ImagePreview> <img className="close-icon" src={CloseIcon} alt="CloseIcon" onClick={() => { setIsUploaded(false); setImage(null); }} />{typeFile.includes("video") ? (<video id="uploaded-image" src={image} draggable={false} controls autoPlay alt="uploaded-img" style={{ width: "300px", height: "300px" }} />) : (<img id="uploaded-image" src={image} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} />)}</ImagePreview>)}</div></BoxUpload> </Container> <div className="wrapper" id="wrapper_profile" style={{ width: "100%" }}> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Announcement Title:<span className="required_symbol">*</span></label> <input type="text" className="inputs" autoComplete="off" required onChange={(e) => setAnnTitle(e.target.value)} /> </div><div className="input_fields"> <label>Description:<span className="required_symbol">*</span></label> <textarea type="text" className="textarea" style={{ height: "15rem" }} required autoComplete="off" onChange={(e) => setAnnDesc(e.target.value)} /> </div></div></div><div className="add_resident_container_footer" id="mobile_hidden"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Submit" className="btn" onClick={add_announcement} /> </div></div></div></div></Decline> <PopUp title="New Program / Event" openPopup={openPopup} setOpenPopup={setOpenPopup} maxWidth="md" > <p style={{ marginBottom: "15px" }}>Please provide the necessary information for Program/Event.</p><Container> <BoxUpload> <div className="image-upload">{!isUploaded ? (<> <label htmlFor="upload-input"> <img src={FolderIcon} draggable={"false"} alt="placeholder" style={{ width: 100, height: 100 }} /> <p style={{ color: "#444" }}> Click to upload image </p></label> <input id="upload-input" type="file" accept=".jpg,.jpeg,.gif,.png,.mov,.mp4" onChange={(e) => handleFileUpload(e)} /> </>) : (<ImagePreview> <img className="close-icon" src={CloseIcon} alt="CloseIcon" onClick={() => { setIsUploaded(false); setImage(null); }} />{typeFile.includes("video") ? (<video id="uploaded-image" src={image} draggable={false} controls autoPlay alt="uploaded-img" style={{ width: "300px", height: "300px" }} />) : (<img id="uploaded-image" src={image} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} />)}</ImagePreview>)}</div></BoxUpload> </Container> <div className="wrapper" id="wrapper_profile" style={{ width: "100%" }}> <div className="forms" id="inputfields_profile"> <div className="input_fields"> <label>Program/Event Title:<span className="required_symbol">*</span></label> <input type="text" className="inputs" autoComplete="off" required onChange={(e) => setProgramTitle(e.target.value)} /> </div><div className="input_fields"> <label>Description:<span className="required_symbol">*</span></label> <textarea type="text" className="textarea" style={{ height: "15rem" }} required autoComplete="off" onChange={(e) => setProgramDesc(e.target.value)} /> </div><div className="input_fields"> <label>Program/Event Location:</label> <textarea type="text" className="textarea" required autoComplete="off" onChange={(e) => setProgramLoc(e.target.value)} /> </div><div className="input_fields"> <label>Program/Event Start Date:<span className="required_symbol">*</span></label> <input type="date" className="inputs" required autoComplete="off" min={moment().format("YYYY-MM-DD")} onChange={(e) => setProgramDate(e.target.value)} /> </div><div className="input_fields"> <label>Program/Event Time</label> <input type="time" className="inputs" required autoComplete="off" onChange={(e) => setProgramTime(e.target.value)} /> </div><div className="input_fields"> <label>Program/Event End Date</label> <input type="date" className="inputs" required autoComplete="off" min={moment().format("YYYY-MM-DD")} onChange={(e) => setProgramEndDate(e.target.value)} /> </div></div></div><div className="add_resident_container_footer" id="mobile_hidden"> <div className="wrapper" id="wrapper_profile"> <div className="forms" id="inputfields_profile"> <div className="input_fields" > <input type="submit" value="Submit" className="btn" onClick={add_progev} /> </div></div></div></div></PopUp> <Router> <div className="manage_programs_events"> <div className="certificate_request"> <div className="process_request_container"> <div className="adminhome_titles"> <h1>Manage Programs & Events</h1> <hr /> </div><div className="folder"> <div className="folder_buttons">{active.map((button, index) => (<Link to={button.path} key={index} onClick={() => toggleActive(button.id)} className={`custom${button.isActive ? " active" : ""}`}>{button.buttonName}</Link>))}<div className={`underline${id === 0 ? " active-0" : ""}${id === 1 ? " active-1" : ""}${id === 2 ? " active-2" : ""}${id === 3 ? " active-3" : ""}`} /> </div><div className="resident_tbl_header"> <div className="new_resident_btn_container"> <button className="new_resident_btn" onClick={openInPopup}> <IoIosAdd className="btn_icon" />New Program / Event</button> </div><div className="new_resident_btn_container"> <button className="new_resident_btn" onClick={openAnnouncement}> <IoIosAdd className="btn_icon" />New Announcement</button> </div></div><Switch> <Route path="/manage-programs-events/upcoming" component={UpcomingProgEv} /> <Route path="/manage-programs-events/completed" component={CompletedProgEv} /> <Route path="/manage-programs-events/cancelled" component={CancelledProgEv} /> <Route path="/manage-programs-events/announcement" component={Announcement} /> <Redirect to="/manage-programs-events/upcoming"></Redirect> </Switch> </div></div></div></div></Router> </main>
        </div>
    )
}