import React, { useState, useEffect } from 'react'
import { useHistory } from 'react-router-dom'
import Axios from 'axios'
import Footer from './../../../components/Footer/Footer';
import ConfirmDialog from './../../../components/Dialog/ConfirmDialog';
import SuccessDialog from './../../../components/Dialog/SuccessDialog'
import LoginAuthPop from './../../../components/Dialog/LoginAuthPop';
import Notification from './../../../components/Dialog/Notification';
import Navbar from './../../../components/Navbar/Navbar';
import Helm from '../../../components/Helmet/Helmet';
import { Container, BoxUpload, ImagePreview } from "./../../../components/Styled/ImageStyle";
import FolderIcon from "../../../images/folder_icon_transparent.png";
import CloseIcon from "../../../svg/CloseIcon.svg";
import './EditAccount.css'
import loading from '../../../assets/icons/loading.png';
function EditAccount() {
    Axios.defaults.withCredentials = true;
    const [username, setUsername] = useState(""), [password, setPassword] = useState(""), [confirmPassword, setConfirmPassword] = useState(""), [notify, setNotify] = useState({ isOpen: !1, message: "", type: "" }), [successDialog, setSuccessDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [errorDialog, setErrorDialog] = useState({ isOpen: !1, title: "", subtitle: "", noButton: "" }), [confirmDialog, setConfirmDialog] = useState({ isOpen: !1, title: "", subtitle: "", yesButton: "", noButton: "" }), [click, setClick] = useState(!1), [editUser, setEditUser] = useState(!1), [account_id, setAccountId] = useState(""), [user_id, setUserId] = useState(""), [user_img, setUserImg] = useState(""), history = useHistory(), [isLoading, setIsLoading] = useState(false), [, setImage] = useState(""), [isUploaded, setIsUploaded] = useState(true), [, setTypeFile] = useState(""), [postImage, setPostImage] = useState(""), [erase, setErase] = useState(false), refresh = () => { setSuccessDialog({ ...successDialog, isOpen: !1, }); history.push("/MyProfile") }, edit_password = () => { setClick(!0) }, back = () => { setClick(!1); setEditUser(!1) }, edit_username = () => { setEditUser(!0) }, [edit_img, setEditImg] = useState(!1), edit_profile_img = () => { setEditImg(!0) }, cancel_edit_profile_img = () => { setEditImg(!1); setIsUploaded(!0) };
    useEffect(() => { async function fetchLoading() { setIsLoading(!0); await Axios.get("http://localhost:3001/login").then((response) => { if (response.data.loggedIn === !0) { setUsername(response.data.user[0].username); setPassword(response.data.user[0].password); setAccountId(response.data.user[0].account_id); setUserId(response.data.user[0].user_id); setUserImg(response.data.user[0].image); setIsLoading(!1) } }); return () => { } } fetchLoading() }, [])
    const minOf8_maxOf20 = /(?=.{8,20}$)/, alphanumeric = /^[a-zA-Z0-9._]*$/, noUnderscoreAndDotAtBegin = /^(?![_.])/, noUnderscoreDotAtBetween = /^(?!.*[_.]{2})/, noUnderscoreDotatEnd = /^(?<![_.])/;
    const save_username = () => { if (!username) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Please type your username.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!minOf8_maxOf20.test(String(username).toLowerCase())) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Choose a username 8-20 characters long.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!alphanumeric.test(String(username).toLowerCase())) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Username must contain alphanumeric characters.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!noUnderscoreAndDotAtBegin.test(String(username)) || !noUnderscoreDotAtBetween.test(String(username)) || !noUnderscoreDotatEnd.test(String(username))) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Invalid username.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Change Username.", subtitle: "Are you sure you want to change your username?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => save_username_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    const save_username_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.put("http://localhost:3001/UserUpdateUsername", { update_username: username, update_accountId: account_id }).then((response) => { if (response.data.msg1) { setErrorDialog({ isOpen: true, title: "Update Error.", subtitle: response.data.msg1, noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (response.data.msg2) { setSuccessDialog({ isOpen: true, title: "Username Changed Successfully.", subtitle: "Please login your account again.", noButton: <button onClick={() => refresh()} className="alert_noBtn">Back</button>, }) } else { setErrorDialog({ isOpen: true, title: "Update Error.", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    function BackToAccount() { history.push("/MyProfile") }
    const save_password = () => { const pswrdValidation = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/; if (!password || !confirmPassword) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Please type your password.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (password !== confirmPassword) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Password doesn't match.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else if (!pswrdValidation.test(String(password))) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Password minimum of 8 characters, must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Change Password.", subtitle: "Are you sure you want to change your password?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => save_password_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    const save_password_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.put("http://localhost:3001/UserUpdatePassword", { update_password: password, update_accountId: account_id, }).then((response) => { if (response.data.msg1) { setSuccessDialog({ isOpen: true, title: "Password Changed Successfully.", subtitle: "", noButton: <button onClick={() => refresh()} className="alert_noBtn">Back</button>, }) } else { setErrorDialog({ isOpen: true, title: "Update Failed.", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const update_profile_img_confirm = () => { setConfirmDialog({ ...confirmDialog, isOpen: false }); Axios.put("http://localhost:3001/updateProfileImg", { update_img: postImage, update_userId: user_id }).then((response) => { if (response.data.msg1) { setSuccessDialog({ isOpen: true, title: "Profile Picture Updated!", subtitle: "", noButton: <button onClick={() => refresh()} className="alert_noBtn">Back</button>, }) } else if (response.data.err) { setErrorDialog({ isOpen: true, title: "Update Failed.", subtitle: "Something went wrong. Please try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setErrorDialog({ isOpen: true, title: "Update Failed.", subtitle: "Please check your connection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } }) }
    const update_profile_img = () => { if (!postImage) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Please choose a photo.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn">Back</button> }) } else { setConfirmDialog({ isOpen: true, title: "Update Profile Picture", subtitle: "Are you sure you want to change your Profile Picture?", noButton: <button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn">No</button>, yesButton: <button onClick={() => update_profile_img_confirm()} className="alert_yesBtn"> Yes </button> }) } }
    const convertToBase64 = (file) => { return new Promise((resolve, reject) => { const fileReader = new FileReader(); fileReader.readAsDataURL(file); fileReader.onload = () => { const base64String = fileReader.result.replace("data:", "").replace(/^.+,/, ""); resolve(base64String); }; fileReader.onerror = (error) => { reject(error); }; }); };
    const handleFileUpload = async (e) => { if (!isUploaded) { const fsize = e.target.files[0].size; const file = Math.round(fsize / 1000); if (file >= 50000) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "File too Big, please select a file less than 50mb", noButton: (<button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn" > Back </button>), }); } else { const file = e.target.files[0]; const base64 = await convertToBase64(file); setPostImage(base64); setIsUploaded(true); if (e.target.files && e.target.files[0]) { setTypeFile(e.target.files[0].type); let reader = new FileReader(); reader.onload = function (e) { setImage(e.target.result); setIsUploaded(true); }; reader.readAsDataURL(e.target.files[0]); } } } else { setImage(e.target.value); } };
    return (
        <div className="MyAccount_container">
            <Helm title={`Edit Account | One Barangay`} />
            <Navbar />
            <Notification notify={notify} setNotify={setNotify} />
            <SuccessDialog successDialog={successDialog} setSuccessDialog={setSuccessDialog} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <div className="container"> <div className="profile_img_container"> <div className="loading_container">{isLoading && <img src={loading} alt={loading} className="loading_icon" />}</div><Container> <BoxUpload> <div className="image-upload">{!isUploaded ? (<> <label htmlFor="upload-input"> <img src={FolderIcon} draggable={"false"} alt="placeholder" style={{ width: 100, height: 100 }} /> <p style={{ color: "#444" }}> Click to upload logo </p></label> <input disabled={edit_img ? "" : "disabled"} id="upload-input" type="file" accept=".jpg,.jpeg,.png," onChange={(e) => handleFileUpload(e)} /> </>) : (<ImagePreview>{edit_img ? <img className="close-icon" src={CloseIcon} alt="CloseIcon" disabled={click ? "" : "disabled"} onClick={() => { setIsUploaded(false); setUserImg(null); setErase(true); }} /> : ""}{!erase && user_img != null ? (<img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(user_img)}`} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} />) : (<img id="uploaded-image" src={`data:image/jpeg;base64,${Buffer.from(postImage)}`} draggable={false} alt="uploaded-img" style={{ width: "300px", height: "300px" }} />)}</ImagePreview>)}</div></BoxUpload> </Container> </div><div className="edit_img_container">{edit_img ? <> <div className="editProfile_container"> <input type="submit" id="editaccbtn" className="editProfile_btn" value="Submit" onClick={update_profile_img} /> </div><div className="editProfile_container"> <input type="submit" id="editaccbtn" className="editProfile_btn" value="Cancel Edit" onClick={cancel_edit_profile_img} /> </div></> : <> <div className="editProfile_container"> <input type="submit" id="editaccbtn" className="editProfile_btn" value="Change Profile Picture" onClick={edit_profile_img} /> </div></>}</div><div className="personal_info"> <form> <div className="container_fluid"> <fieldset className="fieldset_container"> <legend> <i className="fa fa-map-marked-alt"></i> Account Information </legend> <div className="wrapper" id="wrapper_myprofile"> <div className="forms" id="inputfields_profile">{click ? "" : <div className="input_fields"> <label>Username:<span className="text-danger">*</span></label> <input type="text" className="inputs" disabled={editUser ? "" : "disabled"} value={username} autoComplete="off" onChange={(e) => setUsername(e.target.value)} /> </div>}{click ? <> <div className="input_fields"> <label>New Password:<span className="text-danger">*</span></label> <input type="password" className="inputs" autoComplete="off" onChange={(e) => setPassword(e.target.value)} /> </div><div className="input_fields"> <label>Confirm Password:<span className="text-danger">*</span></label> <input type="password" className="inputs" autoComplete="off" onChange={(e) => setConfirmPassword(e.target.value)} /> </div></> : ""}</div></div></fieldset> </div></form>{editUser || click ? "" : <> <div className="editProfile_container"> <input type="submit" className="editProfile_btn" id="editaccbtn" value="Change Username" onClick={edit_username} /> </div><div className="editProfile_container"> <input type="submit" className="editProfile_btn" id="editaccbtn" value="Change Password" onClick={edit_password} /> </div><div className="editProfile_container"> <input type="submit" className="editProfile_btn" id="editaccbtn" value="Back To My Profile" onClick={BackToAccount} /> </div></>}{editUser ? <> <div div className="editProfile_container"> <input type="submit" className="editProfile_btn" id="editaccbtn" value="Save Changes" onClick={save_username} /> </div><div className="editProfile_container"> <input type="submit" className="editProfile_btn" id="editaccbtn" value="Back" onClick={back} /> </div></> : ""}{click ? <> <div className="editProfile_container"> <input type="submit" className="editProfile_btn" value="Change Password" onClick={save_password} /> </div><div className="editProfile_container"> <input type="submit" className="editProfile_btn" value="Back" onClick={back} /> </div></> : ""}</div></div >
            <Footer />
        </div >
    )
}
export default EditAccount