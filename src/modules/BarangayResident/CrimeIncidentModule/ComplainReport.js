import React, { useState, useEffect } from "react";
import "./ComplainReport.css";
import Axios from "axios";
import Navbar from "./../../../components/Navbar/Navbar";
import Footer from "./../../../components/Footer/Footer";
import LoginAuthPop from "./../../../components/Dialog/LoginAuthPop";
import Notification from "./../../../components/Dialog/Notification";
import ConfirmDialog from "./../../../components/Dialog/ConfirmDialog";
import SuccessRegisterDialog from "../../../components/Dialog/SuccessRegisterDialog";
import Helm from "../../../components/Helmet/Helmet";
function ComplainReport() {
    Axios.defaults.withCredentials = true;
    const [successRegisterDialog, setSuccessRegisterDialog] = useState({ isOpen: false, title: "", subtitle: "", yesButton: "", noButton: "", }); const [fname, setFName] = useState(""); const [mname, setMName] = useState(""); const [lname, setLName] = useState(""); const [suffix, setSuffix] = useState(""); const [complain, setComplain] = useState(""); const [contact, setContact] = useState(""); const [resident_id, setResidentId] = useState(""); const [account_id, setAccountId] = useState(""); const [anonymous, setAnonymous] = useState(""); const [notify, setNotify] = useState({ isOpen: false, message: "", type: "", }); const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: "", subtitle: "", yesButton: "", noButton: "", }); const [errorDialog, setErrorDialog] = useState({ isOpen: false, title: "", subtitle: "", noButton: "", });
    var showdate = new Date(), displaytodaysdate = showdate.getFullYear() + "-" + (showdate.getMonth() + 1) + "-" + showdate.getDate();
    useEffect(() => { Axios.get("http://localhost:3001/login").then((response) => { if (response.data.loggedIn === true) { setResidentId(response.data.user[0].resident_id); setAccountId(response.data.user[0].account_id); setFName(response.data.user[0].first_name); setMName(response.data.user[0].middle_name); setLName(response.data.user[0].last_name); setSuffix(response.data.user[0].suffix); setContact(response.data.user[0].contact); } }); }, []);
    const RequestAgain = () => { setSuccessRegisterDialog({ ...successRegisterDialog, isOpen: false, }); setTimeout(function () { window.location.reload(); }, 0); }
    const submit_complain = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.post("http://localhost:3001/ComplainReport", { CR_fName: fname, CR_mName: !mname ? "" : mname, CR_lName: lname, CR_sName: !suffix ? "" : suffix, CR_complaint: complain, CR_contact: contact, CR_residentId: resident_id, CR_accountId: account_id, CR_anonymous: anonymous, CR_dateToday: displaytodaysdate, }).then((response) => { if (response.data.success2) { setConfirmDialog({ ...confirmDialog, isOpen: false, }); setSuccessRegisterDialog({ isOpen: true, title: "Report Successfully Submitted", subtitle: "Do you want to file another report?", yesButton: (<button onClick={() => RequestAgain()} className="alert_yesBtn"> Yes </button>), noButton: (<button onClick={() => setSuccessRegisterDialog({ ...successRegisterDialog, isOpen: false, })} className="alert_backBtn"> Back</button>), }); setNotify({ isOpen: true, message: "Complain Report Submitted!", type: "success", }); } else { setErrorDialog({ isOpen: true, title: "Connection Error.", subtitle: "Please check your connnection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn"> Back</button>, }); } }); };

    const submit_complain_anonymous = () => { setConfirmDialog({ ...confirmDialog, isOpen: false, }); Axios.post("http://localhost:3001/ComplainReport", { CR_fName: fname, CR_mName: mname, CR_lName: lname, CR_sName: suffix, CR_complaint: complain, CR_contact: contact, CR_residentId: resident_id, CR_accountId: account_id, CR_anonymous: anonymous, CR_dateToday: displaytodaysdate, CR_anon: anonymous, }).then((response) => { if (response.data.success) { setConfirmDialog({ ...confirmDialog, isOpen: false, }); setSuccessRegisterDialog({ isOpen: true, title: "Report Successfully Submitted", subtitle: "Do you want to file another report?", yesButton: (<button onClick={() => RequestAgain()} className="alert_yesBtn"> Yes </button>), noButton: (<button onClick={() => setSuccessRegisterDialog({ ...successRegisterDialog, isOpen: false, })} className="alert_backBtn"> Back</button>), }); setNotify({ isOpen: true, message: "Complain Report Submitted!", type: "success", }); } else { setErrorDialog({ isOpen: true, title: "Connection Error.", subtitle: "Please check your connnection and try again.", noButton: <button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn"> Back</button>, }); } }); };

    function verify_complain() { if (anonymous) { if (!complain) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Required fields must not be empty.", noButton: (<button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn" > Back </button>), }); } else { setConfirmDialog({ isOpen: true, title: "Complain Report Confirmation", subtitle: "Are you sure you want to submit the Report as Anonymous?", yesButton: (<button onClick={submit_complain_anonymous} className="alert_yesBtn" >{" "}Yes{" "}</button>), noButton: (<button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn" > No </button>), }); } } else { if (!complain) { setErrorDialog({ isOpen: true, title: "Input Error!", subtitle: "Required fields must not be empty.", noButton: (<button onClick={() => setErrorDialog({ ...errorDialog, isOpen: false })} className="alert_backBtn" > Back </button>), }); } else { setConfirmDialog({ isOpen: true, title: "Complain Report Confirmation", subtitle: "Are you sure you want to submit the Report?", yesButton: (<button onClick={submit_complain} className="alert_yesBtn">{" "}Yes{" "}</button>), noButton: (<button onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })} className="alert_noBtn" > No </button>), }); } } }
    return (
        <div>
            <Helm title={`Complain Report | One Barangay`} />
            <Notification notify={notify} setNotify={setNotify} />
            <ConfirmDialog confirmDialog={confirmDialog} setConfirmDialog={setConfirmDialog} />
            <SuccessRegisterDialog successRegisterDialog={successRegisterDialog} setSuccessRegisterDialog={setSuccessRegisterDialog} />
            <LoginAuthPop errorDialog={errorDialog} setErrorDialog={setErrorDialog} />
            <Navbar />
            <div className="emrgncy_incdnt_container"> <div className="container"> <div className="EditProfile_container"> <div className="wrapper"> <div className="brgy_cl_titles"> <h1>Complaint Report</h1> <p className="noteEnglish"> <span className="reminder">NOTE: </span> Complaint Report is a legal documentation written or applied by an individual to report grievances and wrongdoing. Upon submitting a Complaint Report your <span className="bold">Full Name</span> and{" "}<span className="bold">Contact Number</span> will be sent as well.{" "}</p><p className="noteTagalog"> <span className="reminder">TANDAAN: </span> Ang Complain Report ay isang legal na dokyumento upang mag sumite ng hinaing o maling gawain na nagaganap sa Barangay. Sa pagsusumite ng isang Reklamo, ang iyong{" "}<span className="bold">Buong Pangalan</span> at{" "}<span className="bold">Contact Number</span> ay kasama. </p><p className="required_symbol_english"> <span className="reminder">REMINDER: </span> All{" "}<span className="required_symbol">*</span> are required.{" "}</p><p className="required_symbol_tagalog"> <span className="reminder">PAALALA: </span> Lahat ng may{" "}<span className="required_symbol">*</span> ay kailangan.{" "}</p></div><div className="forms"> <label className="label_checkbox">{" "}Send As Anonymous <input type="checkbox" className="checkbox" onChange={(e) => setAnonymous(e.target.checked)} /> <span className="checkmark"></span> </label>{anonymous ? (<div> <div className="brgy_cl_titles"> <p className="noteEnglish"> <span className="reminder">NOTE: </span> Your credentials such as{" "}<span className="bold"> Full Name </span>and{" "}<span className="bold">Contact Number </span> will not appear in the Barangay when you submit Complaint as Anonymous. </p><p className="noteTagalog"> <span className="reminder">TANDAAN: </span> Ang iyong mga kredensyal katulad ng{" "}<span className="bold">Buong Pangalan</span> at{" "}<span className="bold">Contact Number</span> ay hindi makikita ng Barangay kapag ikaw ay nag sumite ng Reklamo as Anonymous. </p></div><div className="input_fields"> <label> Complain<span className="required_symbol">*</span> </label> <textarea className="textarea" onChange={(e) => setComplain(e.target.value)}></textarea> </div></div>) : (<div> <div className="input_fields"> <label> Complain<span className="required_symbol">*</span> </label> <textarea className="textarea" onChange={(e) => setComplain(e.target.value)}></textarea> </div></div>)}<div className="complain_margin"></div><div className="input_fields"> <input type="submit" value="Submit" className="btn" onClick={verify_complain} /> </div></div></div></div></div></div>
            {window.innerWidth <= 600 ? "" : <Footer />}</div>
    );
}
export default ComplainReport;